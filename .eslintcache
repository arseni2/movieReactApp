[{"D:\\reactmovieapi\\my-app\\src\\redux\\AuthReducer.ts":"1","D:\\reactmovieapi\\my-app\\src\\api\\api.ts":"2","D:\\reactmovieapi\\my-app\\src\\component\\Login\\LoginContainer.tsx":"3","D:\\reactmovieapi\\my-app\\src\\component\\Login\\Login.tsx":"4","D:\\reactmovieapi\\my-app\\src\\component\\Header\\Header.tsx":"5","D:\\reactmovieapi\\my-app\\src\\component\\Header\\HeaderContainer.tsx":"6","D:\\reactmovieapi\\my-app\\src\\App.tsx":"7","D:\\reactmovieapi\\my-app\\src\\redux\\redux.ts":"8","D:\\reactmovieapi\\my-app\\src\\component\\Footer\\Footer.tsx":"9","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetailContainer.tsx":"10","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\FormReviews.tsx":"11","D:\\reactmovieapi\\my-app\\src\\component\\Carousel\\Carousel.tsx":"12","D:\\reactmovieapi\\my-app\\src\\index.js":"13","D:\\reactmovieapi\\my-app\\src\\redux\\HomeReducer.ts":"14","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetail.tsx":"15","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLoginContainer.tsx":"16","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLogin.tsx":"17","D:\\reactmovieapi\\my-app\\src\\particlesComponent\\Partikles.js":"18","D:\\reactmovieapi\\my-app\\src\\component\\Home\\HomeContainer.tsx":"19","D:\\reactmovieapi\\my-app\\src\\component\\Home\\Home.tsx":"20","D:\\reactmovieapi\\my-app\\src\\reportWebVitals.js":"21","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\Actors.tsx":"22","D:\\reactmovieapi\\my-app\\src\\redux\\AppReducer.ts":"23","D:\\reactmovieapi\\my-app\\src\\component\\loader\\loader.tsx":"24","D:\\reactmovieapi\\my-app\\src\\AppContainer.tsx":"25","D:\\reactmovieapi\\my-app\\src\\component\\Header\\SearchMovie.tsx":"26","D:\\reactmovieapi\\my-app\\src\\bin\\bin.tsx":"27"},{"size":6086,"mtime":1618302484533,"results":"28","hashOfConfig":"29"},{"size":9365,"mtime":1618408056057,"results":"30","hashOfConfig":"29"},{"size":1493,"mtime":1618085604170,"results":"31","hashOfConfig":"29"},{"size":2254,"mtime":1618085604194,"results":"32","hashOfConfig":"29"},{"size":5945,"mtime":1618345091163,"results":"33","hashOfConfig":"29"},{"size":2605,"mtime":1618091503209,"results":"34","hashOfConfig":"29"},{"size":1312,"mtime":1618300041047,"results":"35","hashOfConfig":"29"},{"size":672,"mtime":1615277501700,"results":"36","hashOfConfig":"29"},{"size":2723,"mtime":1618085668529,"results":"37","hashOfConfig":"29"},{"size":4116,"mtime":1618173691918,"results":"38","hashOfConfig":"29"},{"size":1510,"mtime":1618408953073,"results":"39","hashOfConfig":"29"},{"size":1030,"mtime":1616166735969,"results":"40","hashOfConfig":"29"},{"size":745,"mtime":1616052258312,"results":"41","hashOfConfig":"29"},{"size":12837,"mtime":1618385624407,"results":"42","hashOfConfig":"29"},{"size":7041,"mtime":1618408784804,"results":"43","hashOfConfig":"29"},{"size":1162,"mtime":1618085697424,"results":"44","hashOfConfig":"29"},{"size":1745,"mtime":1618342655366,"results":"45","hashOfConfig":"29"},{"size":3231,"mtime":1612046412225,"results":"46","hashOfConfig":"29"},{"size":2454,"mtime":1618085525843,"results":"47","hashOfConfig":"29"},{"size":5850,"mtime":1618085519248,"results":"48","hashOfConfig":"29"},{"size":362,"mtime":1609457447472,"results":"49","hashOfConfig":"29"},{"size":881,"mtime":1615037826593,"results":"50","hashOfConfig":"29"},{"size":1845,"mtime":1618302119724,"results":"51","hashOfConfig":"29"},{"size":606,"mtime":1618085623117,"results":"52","hashOfConfig":"29"},{"size":1718,"mtime":1618341440229,"results":"53","hashOfConfig":"29"},{"size":2003,"mtime":1618213786927,"results":"54","hashOfConfig":"29"},{"size":756,"mtime":1616594124350,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"c2sz3p",{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"61"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"61"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"61"},"D:\\reactmovieapi\\my-app\\src\\redux\\AuthReducer.ts",["124"],"D:\\reactmovieapi\\my-app\\src\\api\\api.ts",["125","126"],"import axios, {AxiosResponse} from \"axios\";\r\nimport {currentMovieType, movieType} from \"../redux/HomeReducer\";\r\nimport {dataTokenType} from \"../type/types\";\r\nimport {reviewsType} from \"../component/movieDetail/MovieDetail\";\r\n\r\nexport type movieBinType = Array<{ id: number, user: number, moviePoster: string }>\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'http://localhost:8000/api-auth/',\r\n    headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\r\n    }\r\n});\r\nexport type isUserType = {\r\n    isUser: boolean\r\n}\r\n\r\nfunction getCookie(name: string) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const MovieApi = {\r\n    getMovie() {\r\n        return instance.get(`movie`)\r\n            .then((response: AxiosResponse<movieType>) => {\r\n                return response.data;\r\n            })\r\n            .catch(() => {\r\n                return Promise.reject('oh, no!');\r\n            })\r\n    },\r\n    setMovieBin(userid: string, movieid: string) {\r\n        var data = new FormData();\r\n        data.append('userid', String(userid))\r\n        data.append('movieid', String(movieid))\r\n        return axios({\r\n            method: \"POST\",\r\n            url: `http://localhost:8000/api-auth/moviebin/`,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\r\n            },\r\n            data: data\r\n        }).then((data) => {\r\n            return data.data\r\n        })\r\n    },\r\n    getGenres() {\r\n        return instance.get(`genres`)\r\n            .then((response) => {\r\n                return response.data\r\n            })\r\n    },\r\n    getMovieBin() {\r\n        return instance.get(`moviebin/`)\r\n            .then((response) => {\r\n\r\n                return response.data\r\n            })\r\n    },\r\n    getDetailMovie(pk: number) {\r\n        return instance.get(`movie/${pk}`)\r\n            .then((response: AxiosResponse<currentMovieType>) => {\r\n                //@ts-ignore\r\n                localStorage.setItem('mid', response.data.mid)\r\n                return response.data.movie\r\n            })\r\n    },\r\n    getRating(pk: number) {\r\n        return instance.get(`rating/get/${pk}`, {\r\n            headers: {\r\n                'Content-Type': 'application / x-www-form-urlencoded'\r\n            }\r\n        })\r\n            .then((response) => {\r\n                return response.data\r\n            })\r\n    },\r\n    setRating(star: number, movie: number) {\r\n        return axios({\r\n            method: \"POST\",\r\n            url: \"http://localhost:8000/api-auth/rating\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: {\r\n                star: star,\r\n                movie: movie\r\n\r\n            }\r\n        })\r\n            .then(res => {\r\n\r\n                return res.data\r\n\r\n            })\r\n\r\n    },\r\n    searchMovie(text: string) {\r\n        return instance.get(`m?search=${text}`)\r\n            .then((res) => {\r\n\r\n                return res.data\r\n            })\r\n    },\r\n    GenreMovie(number: any) {\r\n        /*тут приходит по одному элементу мб тут сдклать один обьект*/\r\n        console.log(number)\r\n        let arr = Object.values(number)\r\n        console.log(arr)\r\n        window.url = 'moviefilter?'\r\n        if (arr.length) {\r\n            let str = `${number[Object.keys(number)[0]]}`\r\n            window.url += `${number[Object.keys(number)[0]]}`.substring(1)\r\n            console.log(number[Object.keys(number)[0]])\r\n        }\r\n        for (let item in number) {\r\n            window.url += number[item]\r\n        }\r\n        let url = window.url\r\n        console.log(url)\r\n        return instance.get(`${url}`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n\r\n    },\r\n    CreateReviews(text: string, movie: number | string) {\r\n        return axios({\r\n            method: \"POST\",\r\n            url: `http://localhost:8000/api-auth/reviews`,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\r\n            },\r\n            data: {\r\n                text: String(text),\r\n                movie: Number(movie),\r\n                name: String(localStorage.getItem(\"name\")),\r\n                user: Number(localStorage.getItem(\"userId\"))\r\n            }\r\n        })\r\n\r\n            .then(res => {\r\n\r\n                return res.data\r\n\r\n            })\r\n    },\r\n    getReviews(movieid: number) {\r\n\r\n        return instance.get(`reviews/${movieid}`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n\r\n    },\r\n    Login(name: string | null, password: string, email: string, file: any) {\r\n        const csrftoken = getCookie('csrftoken');\r\n\r\n        let formData = new FormData()\r\n        formData.append('userPhotos', file)\r\n        formData.append('password', password)\r\n        formData.append('email', email)\r\n\r\n        formData.append('name', <string>name)\r\n\r\n        return axios({\r\n            withCredentials: true,\r\n            url: 'http://localhost:8000/auth/users/',\r\n            method: 'POST',\r\n            data: formData,\r\n            headers: {\r\n                'X-CSRFToken': csrftoken\r\n            }\r\n        }).then((res) => {\r\n            return res.data\r\n        })\r\n\r\n\r\n    },\r\n    Token(password: string, email: string) {\r\n        const csrftoken = getCookie('csrftoken');\r\n\r\n        let formData = new FormData()\r\n        formData.append('password', password)\r\n        formData.append('email', email)\r\n\r\n        return axios({\r\n            withCredentials: true,\r\n            url: 'http://localhost:8000/auth/jwt/create',\r\n            method: 'POST',\r\n            data: formData,\r\n            headers: {\r\n                'X-CSRFToken': csrftoken\r\n            }\r\n        }).then((res: AxiosResponse<dataTokenType>) => {\r\n            return res.data\r\n        })\r\n\r\n    },\r\n    userProfile() {\r\n        return axios({\r\n            withCredentials: true,\r\n            url: 'http://localhost:8000/auth/users/me/',\r\n            method: 'GET',\r\n            data: localStorage.getItem(\"name\"),\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        }).then((res) => {\r\n            localStorage.setItem('userId', res.data.id)\r\n            return res.data\r\n        })\r\n            .catch((err) => {\r\n                return err\r\n            })\r\n    },\r\n\r\n    tokenRefresh() {\r\n        return axios({\r\n            withCredentials: true,\r\n            url: 'http://localhost:8000/auth/jwt/refresh', //http://localhost:8000/auth/jwt/refresh\r\n            method: 'POST',\r\n            data: {refresh: localStorage.getItem('tokenRefresh')},\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        }).then((res: AxiosResponse<dataTokenType>) => {\r\n            localStorage.removeItem('token')\r\n            localStorage.setItem('token', res.data.access)\r\n            console.log(res.data.access)\r\n            return res.data\r\n        })\r\n            .catch((err) => {\r\n                return err\r\n            })\r\n    },\r\n    logIn(email: string) {\r\n        return axios({\r\n            withCredentials: true,\r\n            url: `http://localhost:8000/api-auth/loginuser?email=${email}`,\r\n            method: 'GET',\r\n        }).then((res) => {\r\n            console.log(res.data)\r\n            return res.data\r\n        })\r\n            .catch((err) => {\r\n                return err\r\n            })\r\n    },\r\n    userId(email: string) {\r\n        return axios({\r\n            withCredentials: true,\r\n            url: `http://localhost:8000/home/?email=${email}`,\r\n            method: 'GET',\r\n        }).then((res) => {\r\n            console.log(res.data)\r\n            return res.data\r\n        })\r\n            .catch((err) => {\r\n                return err\r\n            })\r\n    },\r\n    deleteReviews(movie_id: string, rid: string) {\r\n        let formData = new FormData()\r\n        formData.append('movie_id', String(movie_id))\r\n        formData.append('reviews_id', String(rid))\r\n        return instance.delete(`delReviews/`, {\r\n            data: formData\r\n        })\r\n            .then((res: AxiosResponse<reviewsType>) => {\r\n                return res.data\r\n            })\r\n    },\r\n    deleteMovieBin(movie_id: string) {\r\n        let formData = new FormData()\r\n        formData.append('movie_id', String(movie_id))\r\n        return instance.delete(`delMovieBin/`, {\r\n            data: formData\r\n        })\r\n            .then((res: AxiosResponse<any>) => {\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n/*\r\ngetReviews(movieid:number){\r\n\r\n        return instance.get(`reviews/${movieid}`)\r\n            .then((res)=>{\r\n                return res.data\r\n            })\r\n\r\n    },\r\n* */\r\n\r\n",["127","128"],"D:\\reactmovieapi\\my-app\\src\\component\\Login\\LoginContainer.tsx",["129"],"D:\\reactmovieapi\\my-app\\src\\component\\Login\\Login.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\Header.tsx",["130"],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\HeaderContainer.tsx",[],"D:\\reactmovieapi\\my-app\\src\\App.tsx",["131"],"D:\\reactmovieapi\\my-app\\src\\redux\\redux.ts",[],["132","133"],"D:\\reactmovieapi\\my-app\\src\\component\\Footer\\Footer.tsx",["134","135","136","137"],"import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../style/style.css'\r\nimport { faInstagramSquare } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faVk } from \"@fortawesome/free-brands-svg-icons\";\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\n\r\n\r\nlet Footer = React.memo(() => {\r\n    return (\r\n        <footer className=\"col-12 d-flex mw-100 position-sticky\" style={{marginLeft: 0+'px', marginTop: 29+'%', height: 300+'px', marginRight: 0+'px',\r\n            background: \"#A99BFF\"}}>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"form col-12\">\r\n                        <form>\r\n                            <div className=\"form-row  \">\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"First name\"/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input style={{width: 100+\"%\"}} type=\"text\" className=\"form-control\" placeholder=\"Last name\"/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Email\" required={true}/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-lg-12\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary col-lg form__item\">send mail\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"icons col-lg\">\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faVk} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faInstagramSquare} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faTwitter} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faYoutube} /></a>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n                <br/>\r\n        </footer>\r\n    );\r\n})\r\n\r\nexport default Footer;\r\n","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetailContainer.tsx",["138","139"],"import React, {Fragment} from 'react'\r\nimport MovieDetail from \"./MovieDetail\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    deleteReviews,\r\n    getCurrentMovie,\r\n    getGenres,\r\n    getMovieBin,\r\n    getRating,\r\n    getReviews,\r\n    MovieId,\r\n    movieType,\r\n    Name,\r\n    Reviews,\r\n    ReviewsText,\r\n    setRating,\r\n    setReviews,\r\n    Text\r\n} from '../../redux/HomeReducer'\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from '../../redux/redux';\r\nimport HeaderContainer from \"../Header/HeaderContainer\";\r\n\r\ntype PathParamsType = {\r\n    pk: string\r\n}\r\ntype mapDispatchToProps = {\r\n    deleteReviews: (movie_id:string, rid:string)=>void\r\n    getMovieBin: any\r\n    getCurrentMovie: (pk: number) => Promise<void>\r\n    getGenres: ()=>void\r\n    getRating: (pk: number) => Promise<void>\r\n    getReviews: (pk:number)=>void\r\n    setReviews: (text:string, pk:number | string)=>void\r\n    setRating: (star: number, movie: number) => Promise<void>\r\n    Name: (name:string)=>void\r\n    Text: (text: string) => void\r\n    movie: Array<movieType>\r\n    ReviewsText: (text: string) => void\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\ntype PropsType = MapPropsType & mapDispatchToProps & RouteComponentProps<PathParamsType>;\r\nclass MovieDetailContainer extends React.PureComponent<PropsType> {\r\n    constructor(props:PropsType) {\r\n        super(props);\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.props.getMovieBin()\r\n        this.props.getCurrentMovie(Number(this.props.match.params.pk))\r\n        this.props.getRating(Number(this.props.match.params.pk))\r\n        this.props.getReviews(Number(this.props.match.params.pk))\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching == false ? <Fragment>\r\n                {/* @ts-ignore */}\r\n                    <HeaderContainer/>\r\n                {/* @ts-ignore */}\r\n                    <MovieDetail movie={this.props.movie}\r\n                                 isFetching={this.props.isFetching}\r\n                                 //@ts-ignore\r\n                                 currentMovie={this.props.currentMovie}\r\n\r\n                                 getRating={this.props.getRating}\r\n                                 rating={this.props.rating}\r\n                                 setReviews={this.props.setReviews}\r\n                                 reviews={this.props.reviews}\r\n                                 pk={this.props.match.params.pk}\r\n                                 Name={this.props.Name}\r\n                                 Text={this.props.Text}\r\n                                 setRating={this.props.setRating}\r\n                                 star={this.props.star}\r\n                                 movieId={this.props.movieId}\r\n                                 isAuthorized={this.props.isAuthorized}\r\n                                 userId={this.props.userId}\r\n                                 ReviewsText={this.props.ReviewsText}\r\n                                 textReviews={this.props.textReviews}\r\n                                 deleteReviews={this.props.deleteReviews}\r\n                    />\r\n\r\n                </Fragment>\r\n\r\n\r\n\r\n                :console.log('')}\r\n\r\n\r\n        </>\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        movie: state.homePage.movie,\r\n        //@ts-ignore\r\n        currentMovie: state.homePage.currentMovie,\r\n        isFetching: state.homePage.isFetching,\r\n        genres: state.homePage.genres,\r\n        rating: state.homePage.rating,\r\n        reviews: state.homePage.reviews,\r\n        nameReviews: state.homePage.name,\r\n        textReviews: state.homePage.textReviews,\r\n        star: state.homePage.star,\r\n        movieId: state.homePage.movieId,\r\n        isAuthorized: state.authPage.isAuthorized,\r\n        userId: state.authPage.userId\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter( connect(mapStateToProps,\r\n    {getCurrentMovie, MovieId, getGenres, getRating,\r\n        getReviews, Reviews, setReviews,Name, Text, ReviewsText, setRating, getMovieBin, deleteReviews})\r\n\r\n(MovieDetailContainer))","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\FormReviews.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Carousel\\Carousel.tsx",["140","141"],"import React,{Component} from 'react'\r\n\r\nimport Carousel, {CarouselProps} from '@brainhubeu/react-carousel'\r\n\r\nimport '@brainhubeu/react-carousel/lib/style.css'\r\nimport {movieType} from \"../../redux/HomeReducer\";\r\n//import logo from '../Terminator_Genisys.png'\r\ntype PropsType = {\r\n    movie: Array<movieType>\r\n}\r\nexport class OwlDemo extends Component<PropsType, CarouselProps> {\r\n    constructor(props: PropsType & CarouselProps) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return(<><Carousel\r\n                // @ts-ignore\r\n                slidesPerPage={3}\r\n                animationSpeed={125}\r\n                offset={-40}\r\n            >\r\n                {Array.from(this.props.movie).map((m, i)=>{\r\n                   return <img key={i} style={{cursor: \"grab\", userSelect:\"none\", marginTop:65+'px'}}\r\n                               height={450+'px'} src={`http://localhost:8000${m.poster}`} />\r\n\r\n\r\n\r\n                })}</Carousel></>\r\n\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default OwlDemo","D:\\reactmovieapi\\my-app\\src\\index.js",[],["142","143"],"D:\\reactmovieapi\\my-app\\src\\redux\\HomeReducer.ts",["144"],"import {MovieApi, movieBinType} from \"../api/api\";\r\nimport {AppStateType} from \"./redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActorsDirectors, reviewsType} from \"../component/movieDetail/MovieDetail\";\r\n\r\nexport type currentMovieType = {\r\n    movie?: any;\r\n    user?: any;\r\n    budget?: number\r\n    category?: string\r\n    description?: string\r\n    fees_in_usa?: number\r\n    fess_in_world?: number\r\n    tagline?: string\r\n    title?: string\r\n    url?: string\r\n    world_premiere?: string\r\n    year?: number\r\n    country?: string\r\n    draft?: boolean\r\n    directors?: any\r\n    actors?: Array<ActorsDirectors>\r\n    id?: number\r\n    genres?: any\r\n    poster?: string\r\n    reviews?: Array<reviewsType>\r\n}\r\nexport type movieType = {\r\n    budget: number\r\n    results?: any\r\n    category: string\r\n    description: string\r\n    fees_in_usa: number\r\n    fess_in_world: number\r\n    tagline: string\r\n    title: string\r\n    url: string\r\n    count?: number\r\n    world_premiere: string\r\n    year: number\r\n    country: string\r\n    draft: boolean\r\n    directors: any\r\n    actors: any\r\n    id: number\r\n    poster: string\r\n    reviews: Array<reviewsType>\r\n}\r\n\r\ntype initialStateType = {\r\n    movieBin: Array<movieBinType>\r\n    text: string,\r\n    movie: Array<movieType>,\r\n    currentMovie: currentMovieType,\r\n    isFetching: boolean,\r\n    genres: Array<any>,\r\n    rating: Array<any>,\r\n    reviews: Array<reviewsType>,\r\n    genresCheck: any,\r\n    movieId: number,\r\n    nameReviews: string | null,\r\n    textReviews: string,\r\n    star: number | null,\r\n    numberState: number\r\n    count: null | number\r\n    results: null | Array<movieType>\r\n    name: null\r\n\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    movieBin: [],\r\n    text: '',\r\n    movie: [],\r\n    currentMovie: {},\r\n    isFetching: true,\r\n    genres: [],\r\n    rating: [],\r\n    reviews: [],\r\n    results: [],\r\n    genresCheck: [],\r\n    movieId: 0,\r\n    nameReviews: '',\r\n    textReviews: '',\r\n    star: 0,\r\n    numberState: 0,\r\n    count: null,\r\n    name: null\r\n};\r\n//type initialStateType = typeof initialState\r\nconst LOAD_MOVIE = \"LOAD_MOVIE\"\r\nconst LOAD_CURRENT_MOVIE = \"LOAD_CURRENT_MOVIE\"\r\nconst TOGGLE_FETCHING = \"TOGGLE_FETCHING\"\r\nconst GENRES = \"GENRES\"\r\nconst RATING = \"RATING\"\r\nconst TEXT = \"TEXT\"\r\nconst MOVIEBIN = \"MOVIEBIN\"\r\nconst CHECKBOX = \"CHECKBOX\"\r\nconst REVIEWS = \"REVIEWS\"\r\nexport const NAME = \"NAME\"\r\nconst TEXTREVIEWS = \"TEXTREVIEWS\"\r\nconst REVIEWSTEXT = \"REVIEWSTEXT\"\r\nconst SETSTAR = \"SETSTAR\"\r\nconst GETSTAR = \"GETSTAR\"\r\nconst SETMOVIEID = \"SETMOVIEID\"\r\nconst SETNUMBER = \"SETNUMBER\"\r\nconst SETCOUNT = \"SETCOUNT\"\r\nconst SETRESULTS = \"SETRESULTS\"\r\n/*сервак при пост зопросе возвращает все отзывы вклюсая толькочто добавленный*/\r\nconst HomeReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case LOAD_MOVIE: {\r\n            return {...state, movie: action.movie}\r\n        }\r\n        case MOVIEBIN: {\r\n            return {...state, movieBin: action.movieBin}\r\n        }\r\n        case SETRESULTS: {\r\n            return {...state, results: action.results}\r\n        }\r\n        case SETCOUNT: {\r\n            return {...state, count: action.count}\r\n        }\r\n        case SETSTAR: {\r\n            return {...state, star: action.star}\r\n        }\r\n        case REVIEWS: {\r\n            return {...state, reviews: action.reviews}\r\n        }\r\n        case TOGGLE_FETCHING: {\r\n            return {...state, isFetching: action.isFething}\r\n        }\r\n        case GENRES: {\r\n            return {...state, genres: action.genres}\r\n        }\r\n        case LOAD_CURRENT_MOVIE: {\r\n            return {...state, currentMovie: action.currentMovie}\r\n        }\r\n        case SETNUMBER: {\r\n            return {...state, numberState: action.number}\r\n        }\r\n        case RATING: {\r\n            return {...state, rating: action.rating}\r\n        }\r\n        case SETMOVIEID: {\r\n            return {...state, movieId: action.movieId}\r\n        }\r\n        case REVIEWSTEXT: {\r\n            return {...state, textReviews: action.text}\r\n        }\r\n        case TEXT: {\r\n            return {...state, text: action.text}\r\n        }\r\n        case NAME: {\r\n            return {...state, nameReviews: action.name}\r\n        }\r\n        case CHECKBOX: {\r\n            return {...state, genresCheck: action.check}\r\n        }\r\n        default:\r\n            return state\r\n\r\n\r\n    }\r\n}\r\ntype ActionType =\r\n    setMovieType\r\n    | setResultsType\r\n    | setCountType\r\n    | setGenresType\r\n    | toggleIsFetchingType\r\n    | setCurrentMovieType\r\n    | RatingCurrentMovieType\r\n    | SearchTextType\r\n    | CheckType\r\n    | ReviewsType\r\n    | SetNumberType\r\n    | MovieIdType\r\n    | StarType\r\n    | TextType\r\n    | RiviewsTextType\r\n    | NameType\r\n    | setMovieBinActionType\r\ntype setMovieBinActionType = {\r\n    type: typeof MOVIEBIN\r\n    movieBin: Array<movieBinType>\r\n}\r\ntype setMovieType = {\r\n    type: typeof LOAD_MOVIE\r\n    movie: any\r\n}\r\ntype setResultsType = {\r\n    type: typeof SETRESULTS\r\n    results: Array<movieType>\r\n}\r\ntype setCountType = {\r\n    type: typeof SETCOUNT\r\n    count: number | null\r\n}\r\ntype setGenresType = {\r\n    type: typeof GENRES\r\n    genres: any\r\n}\r\nexport type toggleIsFetchingType = {\r\n    type: typeof TOGGLE_FETCHING\r\n    isFething: boolean\r\n}\r\ntype setCurrentMovieType = {\r\n    type: typeof LOAD_CURRENT_MOVIE\r\n    currentMovie: any\r\n}\r\ntype RatingCurrentMovieType = {\r\n    type: typeof RATING\r\n    rating: any\r\n}\r\ntype SearchTextType = {\r\n    type: typeof TEXT\r\n    text: string\r\n}\r\ntype CheckType = {\r\n    type: typeof CHECKBOX\r\n    check: any\r\n}\r\ntype ReviewsType = {\r\n    type: typeof REVIEWS\r\n    reviews: any\r\n}\r\nexport type NameType = {\r\n    type: typeof NAME\r\n    name: string\r\n}\r\nexport type TextType = {\r\n    type: typeof TEXTREVIEWS\r\n    text: string\r\n}\r\ntype RiviewsTextType = {\r\n    type: typeof REVIEWSTEXT\r\n    text: string;\r\n}\r\ntype StarType = {\r\n    type: typeof SETSTAR\r\n    star: number\r\n}\r\ntype MovieIdType = {\r\n    type: typeof SETMOVIEID\r\n    movieId: number\r\n}\r\ntype SetNumberType = {\r\n    type: typeof SETNUMBER\r\n    number: number\r\n}\r\nexport const setMovie = (movie: any): setMovieType => ({type: LOAD_MOVIE, movie})\r\nexport const setGenres = (genres: any): setGenresType => ({type: GENRES, genres})\r\nexport const toggleIsFetching = (isFething: boolean): toggleIsFetchingType => ({type: TOGGLE_FETCHING, isFething})\r\nexport const setCurrentMovie = (currentMovie: any): setCurrentMovieType => ({type: LOAD_CURRENT_MOVIE, currentMovie})\r\nexport const RatingCurrentMovie = (rating: any): RatingCurrentMovieType => ({type: RATING, rating})\r\nexport const SearchText = (text: string): SearchTextType => ({type: TEXT, text})\r\nexport const Check = (check: any): CheckType => ({type: CHECKBOX, check})\r\nexport const Reviews = (reviews: any): ReviewsType => ({type: REVIEWS, reviews})\r\nexport const Name = (name: string): NameType => ({type: NAME, name})\r\nexport const Text = (text: string): TextType => ({type: TEXTREVIEWS, text})\r\nexport const ReviewsText = (text: string): RiviewsTextType => ({type: REVIEWSTEXT, text})\r\nexport const Star = (star: number): StarType => ({type: SETSTAR, star})\r\nexport const MovieId = (movieId: number): MovieIdType => ({type: SETMOVIEID, movieId})\r\nexport const SetNumber = (number: number): SetNumberType => ({type: SETNUMBER, number})\r\nexport const getCount = (count: number): setCountType => ({type: SETCOUNT, count})\r\nexport const getResults = (results: Array<movieType>): setResultsType => ({type: SETRESULTS, results})\r\nexport const setMovieBinAction = (movieBin: Array<movieBinType>): setMovieBinActionType => ({type: MOVIEBIN, movieBin})\r\n\r\nexport type GetStateType = () => AppStateType\r\n\r\nexport const getMovie = function () {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getMovie().then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const setReviews = function (text: string, movie: string | number) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.CreateReviews(text, movie).then((data: any) => {\r\n            dispatch(Reviews(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const setMovieBin = function (userid: string | null, movieid: number | undefined) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        // @ts-ignore\r\n        await MovieApi.setMovieBin(userid, movieid).then((data: Array<movieBinType>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const getMovieBin = function () {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getMovieBin().then((data: Array<movieBinType>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const deleteMovieBin = function (movie_id: string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.deleteMovieBin(movie_id).then((data: Array<any>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\n/*export const getMovie = async (dispatch) => {\r\n\r\n\r\n    await MovieApi.getMovie().then(data => {\r\n\r\n\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n        });\r\n    }*/\r\nexport const searchMovie = function (text: string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.searchMovie(text).then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(getCount(data.count))\r\n            dispatch(getResults(data.results))\r\n        })\r\n    }\r\n}\r\nexport const FilterMovie = function (number: any) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.GenreMovie(number).then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(getCount(data.count))\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(getResults(data.results))\r\n        })\r\n    }\r\n}\r\nexport const getGenres = () => {\r\n    return async (dispatch: Dispatch<ActionType>, getState: GetStateType) => {\r\n\r\n\r\n        await MovieApi.getGenres().then((data: any) => {\r\n\r\n\r\n            dispatch(setGenres(data));\r\n            dispatch(toggleIsFetching(false));\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCurrentMovie = function (pk: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n\r\n        await MovieApi.getDetailMovie(pk).then((data: any) => {\r\n\r\n\r\n            dispatch(setCurrentMovie(data));\r\n            dispatch(MovieId(data.id));\r\n\r\n\r\n        });\r\n        await MovieApi.getRating(pk).then((data: any) => {\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(Star(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const getRating = function (pk: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getRating(pk).then((data: any) => {\r\n            dispatch(Star(data))\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const setRating = function (star: number, movie: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.setRating(star, movie).then((data: any) => {\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(Star(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const getReviews = function (pk: number) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getReviews(pk).then((data: any) => {\r\n            dispatch(Reviews(data))\r\n            dispatch(toggleIsFetching(false));\r\n\r\n        })\r\n\r\n    }\r\n}\r\nexport const deleteReviews = function (movie_id: string, rid:string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.deleteReviews(movie_id, rid).then((data: any) => {\r\n            dispatch(Reviews(data))\r\n            dispatch(toggleIsFetching(false));\r\n\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default HomeReducer","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetail.tsx",["145","146","147","148","149","150","151","152","153","154"],"D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLoginContainer.tsx",["155","156","157"],"import RealLogin from './RealLogin'\r\nimport React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {LoginAction, LoginThunk, LoginRealThunk} from \"../../redux/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/redux\";\r\n\r\ntype mapDispatchToProps = {\r\n    LoginRealThunk: (email:string, password:string, name:string)=>void\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\ntype PropsType = MapPropsType & mapDispatchToProps\r\n\r\nclass RealLoginContainer extends React.PureComponent<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <RealLogin\r\n                LoginRealThunk={this.props.LoginRealThunk}\r\n                profile={this.props.profile}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return{\r\n        username: state.authPage.username,\r\n        email: state.authPage.email,\r\n        password: state.authPage.password,\r\n        profile: state.authPage.profile\r\n    }\r\n}\r\nexport default connect<MapPropsType,mapDispatchToProps,PropsType, AppStateType>(mapStateToProps,{LoginRealThunk})(RealLoginContainer)","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLogin.tsx",["158"],"import React from 'react'\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {erorAction} from \"../../redux/AppReducer\";\r\nimport {Link} from 'react-router-dom'\r\n\r\ntype propsType = {\r\n    LoginRealThunk: (email:string, password:string, name:string)=>void\r\n    profile: any\r\n}\r\n\r\nconst RealLogin = React.memo((props: propsType)=>{\r\n    let history = useHistory();\r\n    let dispatch = useDispatch()\r\n    async function handleClick() {\r\n        //history.push(\"\");\r\n        await dispatch(erorAction(false))\r\n        //document.location.reload();\r\n        return (<Redirect to={'/'}/>)\r\n    }\r\n    /* можно получать профиль юзера делая запро сна users/me а не в бд\r\n    * нужно получать токен и деалть запрос на users/me\r\n    *\r\n    * */\r\n    return (<>\r\n        <div>\r\n            <input type={'email'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.email = e.target.value\r\n            }} placeholder={'email'}/> <br/>\r\n            <input type={'password'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.password = e.target.value\r\n            }} placeholder={'password'}/>\r\n            <input type={'text'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.name = e.target.value\r\n            }} placeholder={'name'}/>\r\n\r\n            <button type={\"submit\"} onClick={async ()=>{await props.LoginRealThunk(window.email, window.password, window.name);\r\n\r\n                await handleClick()\r\n\r\n            }}><Link to={'/'}>login</Link></button>\r\n\r\n        </div>\r\n    </>)\r\n})\r\n\r\nexport default RealLogin","D:\\reactmovieapi\\my-app\\src\\particlesComponent\\Partikles.js",[],"D:\\reactmovieapi\\my-app\\src\\component\\Home\\HomeContainer.tsx",["159","160","161"],"import React from 'react'\r\nimport Home from \"./Home\";\r\nimport {connect} from 'react-redux';\r\nimport {getMovie, toggleIsFetching, movieType, currentMovieType} from '../../redux/HomeReducer'\r\nimport {AppStateType} from \"../../redux/redux\";\r\nimport {ISUserThunk} from \"../../redux/AuthReducer\";\r\n\r\n\r\ntype mapDispatchToProps = {\r\n    getMovie: ()=>void,\r\n    ISUserThunk: ()=>void\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n/*type PropsType = {\r\n    getMovie: ()=>void\r\n    isFetching: boolean\r\n    movie: Array<movieType>\r\n    currentMovie: any | null\r\n    text: string\r\n    results: Array<movieType>\r\n    count:number | null\r\n}*/\r\n/*сделать так чтобы все данные были в стейте this.props.movie.count = this.props.count\r\n* type PropsType = MapPropsType & mapDispatchToProps\r\n* и по сути ероров не будет*/\r\n\r\n//type PropsType = MapPropsType & mapDispatchToProps\r\ntype PropsType = MapPropsType & mapDispatchToProps\r\n\r\n\r\nclass HomeContainer extends React.PureComponent<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getMovie()\r\n        if(localStorage.getItem('token')){\r\n            this.props.ISUserThunk()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            { this.props.isFetching ? console.log('') : <Home movie={this.props.movie}\r\n                                                                isFetching={this.props.isFetching}\r\n\r\n                                                                currentMovie={this.props.currentMovie}\r\n                                                                text={this.props.text}\r\n\r\n                                                                movieResults={this.props.results}\r\n                                                                movieCount={this.props.count}\r\n\r\n\r\n            /> }\r\n\r\n        </>\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        movie: state.homePage.movie,\r\n        currentMovie: state.homePage.currentMovie,\r\n        isFetching: state.homePage.isFetching,\r\n        text: state.homePage.text,\r\n        results: state.homePage.results,\r\n        count: state.homePage.count,\r\n    }\r\n}\r\n/*let mapDispatchToPops = (dispatch) => {\r\n    return{\r\n        getMovie:()=>{dispatch(getMovie)}\r\n    }\r\n}*/\r\n\r\n\r\nexport default connect<MapPropsType,mapDispatchToProps,PropsType, AppStateType>(mapStateToProps,\r\n    {getMovie, ISUserThunk})(HomeContainer);","D:\\reactmovieapi\\my-app\\src\\component\\Home\\Home.tsx",["162","163","164","165","166","167","168"],"D:\\reactmovieapi\\my-app\\src\\reportWebVitals.js",[],["169","170"],"D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\Actors.tsx",["171","172"],"D:\\reactmovieapi\\my-app\\src\\redux\\AppReducer.ts",["173"],"import {getGenres, getMovie, GetStateType, toggleIsFetchingType} from \"./HomeReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ISUserThunk, ProfileThunk} from \"./AuthReducer\";\r\n\r\ntype initialStateType = {\r\n    isInitilized: boolean\r\n    eror: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    isInitilized: false,\r\n    eror: false\r\n}\r\n\r\n\r\nexport const INITIALZED = \"INITIALZED\"\r\nexport const EROR = \"EROR\"\r\n\r\ntype ActionInitType = {\r\n    type: typeof INITIALZED\r\n    //isInitial: boolean\r\n}\r\ntype ActionErorType = {\r\n    type: typeof EROR\r\n    eror: boolean\r\n}\r\n\r\ntype getMovieType = typeof getMovie\r\n\r\ntype ActionType = ActionInitType | toggleIsFetchingType | ActionErorType\r\n\r\n\r\n\r\nconst AppReducer = (state = initialState, action: ActionType):initialStateType => {/*InitialStateType*/\r\n    switch(action.type) {\r\n        case INITIALZED: {\r\n            return {...state, isInitilized: true}\r\n        }\r\n        case EROR: {\r\n            return {...state, eror: true}\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n\r\n    }}\r\n\r\nlet initAction = ()=>({type: INITIALZED})\r\nexport let erorAction = (eror: boolean): ActionErorType=>({type: EROR, eror})\r\nexport const initThunk = function (){\r\n    return async function (dispatch:Dispatch<any>, getState:GetStateType){\r\n        var promise = dispatch(getMovie)\r\n        var promise2 = dispatch(getGenres)\r\n        var promise1 = dispatch(ProfileThunk)\r\n        var promise4 = dispatch(ISUserThunk)\r\n        Promise.all([promise, promise1, promise2, promise4]).then(()=>{\r\n            setTimeout(()=>{ dispatch(initAction())},600)\r\n\r\n        })\r\n        Promise.reject([promise1]).then(function(success) {\r\n            // не вызывается\r\n        }, function(error) {\r\n           dispatch(erorAction(true))\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppReducer\r\n","D:\\reactmovieapi\\my-app\\src\\component\\loader\\loader.tsx",[],"D:\\reactmovieapi\\my-app\\src\\AppContainer.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\SearchMovie.tsx",[],"D:\\reactmovieapi\\my-app\\src\\bin\\bin.tsx",["174","175"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMovieBin} from '../redux/HomeReducer';\r\nimport {AppStateType} from \"../redux/redux\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Bin = (props: any) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getMovieBin())\r\n    }, [])\r\n    let movies = useSelector((state: AppStateType) => state.homePage.movieBin)\r\n    console.log(movies)\r\n    return (<>\r\n        {movies.map((m: any, i) => {\r\n            return <div>\r\n                <Link to={`movie/${m.movieid}`}>\r\n                    <img src={`http://localhost:8000${m.moviePoster}`}/>\r\n                </Link>\r\n            </div>\r\n        })}\r\n    </>)\r\n}\r\n\r\n",{"ruleId":"176","severity":1,"message":"177","line":158,"column":42,"nodeType":"178","messageId":"179","endLine":158,"endColumn":59},{"ruleId":"180","severity":1,"message":"181","line":124,"column":17,"nodeType":"182","messageId":"183","endLine":124,"endColumn":20},{"ruleId":"176","severity":1,"message":"177","line":177,"column":33,"nodeType":"178","messageId":"179","endLine":177,"endColumn":45},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":15,"column":5,"nodeType":"190","messageId":"191","endLine":17,"endColumn":6},{"ruleId":"192","severity":1,"message":"193","line":119,"column":97,"nodeType":"194","endLine":119,"endColumn":165},{"ruleId":"180","severity":1,"message":"195","line":9,"column":8,"nodeType":"182","messageId":"183","endLine":9,"endColumn":26},{"ruleId":"184","replacedBy":"196"},{"ruleId":"186","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":43,"column":21,"nodeType":"194","endLine":43,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":44,"column":21,"nodeType":"194","endLine":44,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":45,"column":21,"nodeType":"194","endLine":45,"endColumn":33},{"ruleId":"198","severity":1,"message":"199","line":46,"column":21,"nodeType":"194","endLine":46,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":47,"column":5,"nodeType":"190","messageId":"191","endLine":50,"endColumn":6},{"ruleId":"200","severity":1,"message":"201","line":61,"column":36,"nodeType":"202","messageId":"203","endLine":61,"endColumn":38},{"ruleId":"188","severity":1,"message":"189","line":12,"column":5,"nodeType":"190","messageId":"191","endLine":15,"endColumn":6},{"ruleId":"192","severity":1,"message":"193","line":29,"column":27,"nodeType":"194","endLine":30,"endColumn":93},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"180","severity":1,"message":"204","line":104,"column":7,"nodeType":"182","messageId":"183","endLine":104,"endColumn":14},{"ruleId":"180","severity":1,"message":"205","line":11,"column":9,"nodeType":"182","messageId":"183","endLine":11,"endColumn":13},{"ruleId":"200","severity":1,"message":"201","line":60,"column":48,"nodeType":"202","messageId":"203","endLine":60,"endColumn":50},{"ruleId":"192","severity":1,"message":"193","line":78,"column":17,"nodeType":"194","endLine":80,"endColumn":81},{"ruleId":"206","severity":1,"message":"207","line":106,"column":25,"nodeType":"208","messageId":"209","endLine":108,"endColumn":26},{"ruleId":"200","severity":1,"message":"201","line":107,"column":51,"nodeType":"202","messageId":"203","endLine":107,"endColumn":53},{"ruleId":"200","severity":1,"message":"201","line":107,"column":117,"nodeType":"202","messageId":"203","endLine":107,"endColumn":119},{"ruleId":"200","severity":1,"message":"201","line":114,"column":106,"nodeType":"202","messageId":"203","endLine":114,"endColumn":108},{"ruleId":"200","severity":1,"message":"201","line":128,"column":35,"nodeType":"202","messageId":"203","endLine":128,"endColumn":37},{"ruleId":"192","severity":1,"message":"193","line":138,"column":45,"nodeType":"194","endLine":139,"endColumn":136},{"ruleId":"200","severity":1,"message":"201","line":147,"column":53,"nodeType":"202","messageId":"203","endLine":147,"endColumn":55},{"ruleId":"180","severity":1,"message":"210","line":4,"column":9,"nodeType":"182","messageId":"183","endLine":4,"endColumn":20},{"ruleId":"180","severity":1,"message":"211","line":4,"column":22,"nodeType":"182","messageId":"183","endLine":4,"endColumn":32},{"ruleId":"188","severity":1,"message":"189","line":16,"column":5,"nodeType":"190","messageId":"191","endLine":18,"endColumn":6},{"ruleId":"180","severity":1,"message":"212","line":13,"column":9,"nodeType":"182","messageId":"183","endLine":13,"endColumn":16},{"ruleId":"180","severity":1,"message":"213","line":4,"column":19,"nodeType":"182","messageId":"183","endLine":4,"endColumn":35},{"ruleId":"180","severity":1,"message":"214","line":4,"column":37,"nodeType":"182","messageId":"183","endLine":4,"endColumn":46},{"ruleId":"180","severity":1,"message":"215","line":4,"column":48,"nodeType":"182","messageId":"183","endLine":4,"endColumn":64},{"ruleId":"180","severity":1,"message":"216","line":5,"column":14,"nodeType":"182","messageId":"183","endLine":5,"endColumn":21},{"ruleId":"180","severity":1,"message":"217","line":5,"column":23,"nodeType":"182","messageId":"183","endLine":5,"endColumn":28},{"ruleId":"180","severity":1,"message":"218","line":5,"column":30,"nodeType":"182","messageId":"183","endLine":5,"endColumn":36},{"ruleId":"180","severity":1,"message":"219","line":8,"column":9,"nodeType":"182","messageId":"183","endLine":8,"endColumn":18},{"ruleId":"180","severity":1,"message":"220","line":9,"column":8,"nodeType":"182","messageId":"183","endLine":9,"endColumn":18},{"ruleId":"180","severity":1,"message":"215","line":10,"column":9,"nodeType":"182","messageId":"183","endLine":10,"endColumn":25},{"ruleId":"200","severity":1,"message":"201","line":112,"column":33,"nodeType":"202","messageId":"203","endLine":112,"endColumn":35},{"ruleId":"184","replacedBy":"221"},{"ruleId":"186","replacedBy":"222"},{"ruleId":"200","severity":1,"message":"201","line":15,"column":31,"nodeType":"202","messageId":"203","endLine":15,"endColumn":33},{"ruleId":"192","severity":1,"message":"193","line":17,"column":21,"nodeType":"194","endLine":19,"endColumn":35},{"ruleId":"180","severity":1,"message":"223","line":28,"column":6,"nodeType":"182","messageId":"183","endLine":28,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":11,"column":8,"nodeType":"226","endLine":11,"endColumn":10,"suggestions":"227"},{"ruleId":"192","severity":1,"message":"193","line":18,"column":21,"nodeType":"194","endLine":18,"endColumn":73},"@typescript-eslint/consistent-type-assertions","Use 'as string' instead of '<string>'.","TSTypeAssertion","as","@typescript-eslint/no-unused-vars","'str' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["228"],"no-negated-in-lhs",["229"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RealLoginContainer' is defined but never used.",["228"],["229"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GETSTAR' is assigned a value but never used.","'Link' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'LoginAction' is defined but never used.","'LoginThunk' is defined but never used.","'history' is assigned a value but never used.","'toggleIsFetching' is defined but never used.","'movieType' is defined but never used.","'currentMovieType' is defined but never used.","'NavLink' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'faYoutube' is defined but never used.","'Particless' is defined but never used.",["228"],["229"],"'getMovieType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["230"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},"Update the dependencies array to be: [dispatch]",{"range":"233","text":"234"},[369,371],"[dispatch]"]