[{"D:\\reactmovieapi\\my-app\\src\\redux\\AuthReducer.ts":"1","D:\\reactmovieapi\\my-app\\src\\api\\api.ts":"2","D:\\reactmovieapi\\my-app\\src\\component\\Login\\LoginContainer.tsx":"3","D:\\reactmovieapi\\my-app\\src\\component\\Login\\Login.tsx":"4","D:\\reactmovieapi\\my-app\\src\\component\\Header\\Header.tsx":"5","D:\\reactmovieapi\\my-app\\src\\component\\Header\\HeaderContainer.tsx":"6","D:\\reactmovieapi\\my-app\\src\\App.tsx":"7","D:\\reactmovieapi\\my-app\\src\\redux\\redux.ts":"8","D:\\reactmovieapi\\my-app\\src\\component\\Footer\\Footer.tsx":"9","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetailContainer.tsx":"10","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\FormReviews.tsx":"11","D:\\reactmovieapi\\my-app\\src\\component\\Carousel\\Carousel.tsx":"12","D:\\reactmovieapi\\my-app\\src\\index.js":"13","D:\\reactmovieapi\\my-app\\src\\redux\\HomeReducer.ts":"14","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetail.tsx":"15","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLoginContainer.tsx":"16","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLogin.tsx":"17","D:\\reactmovieapi\\my-app\\src\\particlesComponent\\Partikles.js":"18","D:\\reactmovieapi\\my-app\\src\\component\\Home\\HomeContainer.tsx":"19","D:\\reactmovieapi\\my-app\\src\\component\\Home\\Home.tsx":"20","D:\\reactmovieapi\\my-app\\src\\reportWebVitals.js":"21","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\Actors.tsx":"22","D:\\reactmovieapi\\my-app\\src\\redux\\AppReducer.ts":"23","D:\\reactmovieapi\\my-app\\src\\component\\loader\\loader.tsx":"24","D:\\reactmovieapi\\my-app\\src\\AppContainer.tsx":"25","D:\\reactmovieapi\\my-app\\src\\component\\Header\\SearchMovie.tsx":"26","D:\\reactmovieapi\\my-app\\src\\bin\\bin.tsx":"27"},{"size":6086,"mtime":1618302484533,"results":"28","hashOfConfig":"29"},{"size":9365,"mtime":1622295414092,"results":"30","hashOfConfig":"29"},{"size":1493,"mtime":1618085604170,"results":"31","hashOfConfig":"29"},{"size":2254,"mtime":1618085604194,"results":"32","hashOfConfig":"29"},{"size":5945,"mtime":1618345091163,"results":"33","hashOfConfig":"29"},{"size":2605,"mtime":1618091503209,"results":"34","hashOfConfig":"29"},{"size":1312,"mtime":1618300041047,"results":"35","hashOfConfig":"29"},{"size":672,"mtime":1615277501700,"results":"36","hashOfConfig":"29"},{"size":2723,"mtime":1618085668529,"results":"37","hashOfConfig":"29"},{"size":4116,"mtime":1618173691918,"results":"38","hashOfConfig":"29"},{"size":1510,"mtime":1618408953073,"results":"39","hashOfConfig":"29"},{"size":1030,"mtime":1616166735969,"results":"40","hashOfConfig":"29"},{"size":787,"mtime":1618479547999,"results":"41","hashOfConfig":"29"},{"size":12837,"mtime":1618385624407,"results":"42","hashOfConfig":"29"},{"size":7041,"mtime":1618408784804,"results":"43","hashOfConfig":"29"},{"size":1162,"mtime":1618085697424,"results":"44","hashOfConfig":"29"},{"size":1745,"mtime":1618342655366,"results":"45","hashOfConfig":"29"},{"size":3231,"mtime":1612046412225,"results":"46","hashOfConfig":"29"},{"size":2454,"mtime":1618085525843,"results":"47","hashOfConfig":"29"},{"size":5890,"mtime":1618481121634,"results":"48","hashOfConfig":"29"},{"size":362,"mtime":1609457447472,"results":"49","hashOfConfig":"29"},{"size":881,"mtime":1615037826593,"results":"50","hashOfConfig":"29"},{"size":1845,"mtime":1618302119724,"results":"51","hashOfConfig":"29"},{"size":606,"mtime":1618085623117,"results":"52","hashOfConfig":"29"},{"size":1718,"mtime":1618341440229,"results":"53","hashOfConfig":"29"},{"size":2003,"mtime":1618213786927,"results":"54","hashOfConfig":"29"},{"size":756,"mtime":1616594124350,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"c2sz3p",{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"65"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"59"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"59"},"D:\\reactmovieapi\\my-app\\src\\redux\\AuthReducer.ts",["132"],"import {MovieApi} from \"../api/api\";\r\nimport {GetStateType, toggleIsFetching, toggleIsFetchingType} from \"./HomeReducer\";\r\nimport {dataLoginType, dataTokenType, initialStateType, profileType} from \"../type/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {erorAction} from \"./AppReducer\";\r\n\r\n\r\nlet initialState: initialStateType = {\r\n    isAuthorized: false,\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    file:'',\r\n    token: null,\r\n    tokenRefresh: null,\r\n    profile: [],\r\n    userId: null,\r\n}\r\n/*\r\nэто для homereducer для мувиков\r\n* let initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n* */\r\nexport const LOGIN = \"LOGIN\"\r\nexport const TOKEN = \"TOKEN\"\r\nexport const PROFILE = \"PROFILE\"\r\nexport const AUTHORIZED = \"AUTHORIZED\"\r\nexport const USERID = \"USERID\"\r\n\r\ntype ActionType = LoginActionType | TokenActionType | ProfileActionType | AuthorizedActionType | setUserIdType | toggleIsFetchingType\r\n\r\ntype LoginActionType = {\r\n    type: typeof LOGIN,\r\n    username: string | null,\r\n    password: string | null,\r\n    email: string | null,\r\n    file: null | any,\r\n\r\n}\r\ntype TokenActionType = {\r\n    type: typeof TOKEN,\r\n    token: string | null,\r\n    tokenRefresh: string | null,\r\n\r\n}\r\ntype ProfileActionType = {\r\n    type: typeof PROFILE,\r\n    profile: any,\r\n\r\n}\r\ntype AuthorizedActionType = {\r\n    type: typeof AUTHORIZED,\r\n    is: boolean,\r\n\r\n}\r\ntype setUserIdType = {\r\n    type: typeof USERID,\r\n    userId: number,\r\n\r\n}\r\nconst LoginReducer = (state = initialState, action: any):initialStateType => {/*InitialStateType*/\r\n    switch(action.type) {\r\n        case LOGIN: {\r\n            return {...state, username: action.username, password: action.password, email: action.email, file: action.file}\r\n        }\r\n        case TOKEN: {\r\n            return {...state, token: action.token, tokenRefresh: action.tokenRefresh}\r\n        }\r\n        case PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case AUTHORIZED: {\r\n            return {...state, isAuthorized: action.is}\r\n        }\r\n        case USERID: {\r\n            return {...state, userId: action.userId}\r\n        }\r\n        default:\r\n            return state\r\n\r\n\r\n    }}\r\nexport const LoginAction = (username: string | null, password: string | null, email: string | null, file: any):LoginActionType => ({type: LOGIN, username, password, email, file})\r\nexport const TokenAction = (token:string | null, tokenRefresh:string | null):TokenActionType => ({type: TOKEN, token, tokenRefresh})\r\nexport const ProfileAction = (profile:profileType):ProfileActionType => ({type: PROFILE, profile}) //Array<customtype>\r\nexport const AuthorizedAction = (is:boolean):AuthorizedActionType => ({type: AUTHORIZED, is})\r\nexport const setUserId = (userId:number):setUserIdType => ({type: USERID, userId})\r\n\r\nexport const LoginThunk = function (username:string | null, password:string, email:string, file:any){\r\n    return async function (dispatch:Dispatch<ActionType>, getState:GetStateType){\r\n        dispatch(toggleIsFetching(true))\r\n        await MovieApi.Login(username, password, email, file).then((data:dataLoginType) => {\r\n            dispatch(LoginAction(data.name, password, data.email, data.userPhotos));\r\n            localStorage.setItem('name', data.name);\r\n            if(localStorage.getItem('token')){\r\n                // @ts-ignore\r\n                dispatch(erorAction(false))\r\n            }\r\n\r\n\r\n\r\n        })\r\n        await MovieApi.Token(password, email).then((data: dataTokenType) => {\r\n            dispatch(TokenAction(data.access, data.refresh))\r\n            localStorage.removeItem('token')\r\n            localStorage.removeItem('tokenRefresh')\r\n            localStorage.setItem('token', data.access)\r\n            localStorage.setItem('tokenRefresh', data.refresh)\r\n        })\r\n        await MovieApi.userProfile().then((data: profileType) => {\r\n            dispatch(ProfileAction(data));\r\n        })\r\n        /*await MovieApi.userId(email).then((data: any) => {\r\n            dispatch(setUserId(data[0].id));\r\n            console.log(data[0].id)\r\n            localStorage.setItem('userId', data[0].id)\r\n            dispatch(toggleIsFetching(false))\r\n        })*/\r\n    }\r\n}\r\nexport const ProfileThunk = function (){\r\n    return async function (dispatch:Dispatch<ActionType>, getState:GetStateType){\r\n        await MovieApi.userProfile().then((data: any) => {\r\n            dispatch(ProfileAction(data));\r\n        })\r\n    }\r\n}\r\nexport const ISUserThunk = function (){\r\n    return function (dispatch:Dispatch<ActionType>, getState:GetStateType){\r\n            dispatch(AuthorizedAction(true));\r\n\r\n    }\r\n}\r\nexport const LoginRealThunk = function (email:string, password: string, name:string){\r\n    return async function (dispatch:Dispatch<ActionType>, getState:GetStateType){\r\n        await MovieApi.Token(password, email).then((data: dataTokenType) => {\r\n            dispatch(TokenAction(data.access, data.refresh));\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('tokenRefresh');\r\n            localStorage.setItem('token', data.access);\r\n            localStorage.setItem('tokenRefresh', data.refresh);\r\n\r\n                // @ts-ignore\r\n                dispatch(erorAction(false))\r\n\r\n        })\r\n        /*await MovieApi.logIn(email).then(data => {\r\n            dispatch(ProfileAction(data));\r\n        })*/\r\n        await MovieApi.userProfile().then((data:profileType) => {\r\n            localStorage.setItem(\"name\", <string>data.name)\r\n            dispatch(ProfileAction(data));\r\n        })\r\n      /*  await MovieApi.userId(email).then((data: any) => {\r\n            dispatch(setUserId(data[0].id));\r\n            console.log(data[0].id)\r\n            localStorage.removeItem('userId')\r\n            localStorage.setItem('userId', data[0].id)\r\n        })*/\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default LoginReducer\r\n",["133","134"],"D:\\reactmovieapi\\my-app\\src\\api\\api.ts",["135","136"],"D:\\reactmovieapi\\my-app\\src\\component\\Login\\LoginContainer.tsx",["137"],"import React from 'react'\r\nimport Login from \"./Login\";\r\nimport {connect} from 'react-redux';\r\nimport {LoginThunk} from \"../../redux/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/redux\";\r\n\r\n//type ConnectType = MapPropsType & mapDispatchToProps & PropsType & AppStateType\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchToProps = {\r\n    LoginThunk: (username:string | null, password:string, email:string, file:any)=>void\r\n\r\n}\r\ntype PropsType = MapPropsType & mapDispatchToProps\r\nclass LoginContainer extends React.PureComponent<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Login\r\n                username={this.props.username}\r\n                email={this.props.email}\r\n                password={this.props.password}\r\n                //LoginAction={this.props.LoginAction}\r\n                LoginThunk={this.props.LoginThunk}\r\n                token={this.props.token}\r\n                tokenRefresh={this.props.tokenRefresh}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        username: state.authPage.username,\r\n        email: state.authPage.email,\r\n        password: state.authPage.password,\r\n        token: state.authPage.token,\r\n        tokenRefresh: state.authPage.tokenRefresh\r\n    }\r\n}\r\nexport default connect<MapPropsType,mapDispatchToProps,PropsType, AppStateType>(mapStateToProps,{LoginThunk})(LoginContainer)",["138","139"],"D:\\reactmovieapi\\my-app\\src\\component\\Login\\Login.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\Header.tsx",["140"],"import '../../style/style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../style/anim.css'\r\nimport React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport SearchMovie from \"./SearchMovie\";\r\nimport {isAuth} from \"../movieDetail/FormReviews\";\r\n/*faSearch*/\r\n\r\ntype propsType = {\r\n    profile: any\r\n    FilterMovie: (number: any)=>void\r\n    isFetching: boolean\r\n    ProfileThunk: ()=>void\r\n    SearchText: (test: string)=>void\r\n    genres: Array<any>\r\n    text: string\r\n    check: (check: any)=>void\r\n    AuthorizedAction: (is: boolean)=>void\r\n    searchMovie: (text: string)=>void\r\n\r\n}\r\n\r\nlet Header = React.memo((props: propsType) => {\r\n\r\n    if(props.profile){\r\n    if(props.profile.request){\r\n        // значит токена нет\r\n        console.log('TOKENA NETY')\r\n        console.log(props.profile.code)\r\n        props.AuthorizedAction(false)\r\n\r\n    } else{\r\n        let token = localStorage.getItem('token')\r\n        console.log(token)\r\n        props.AuthorizedAction(true)\r\n    }}\r\n    let arrGenres: any = {}\r\n\r\n\r\n\r\n    //arrGenres.genres = null\r\n    /* сделать свой гамбургер меню,\r\n    дальше отптимизировать,добвлеть новые фичи,\r\n    писать на ts и использовать много новых технологий = ит камас*/\r\n    /*<div className=\"hamburger-menu\">\r\n                    <input id=\"menu__toggle \" type=\"checkbox\"/>\r\n                    <label className=\"menu__btn \" htmlFor=\"menu__toggle\">\r\n                        <span></span>\r\n                    </label>\r\n\r\n                    <ul className=\"menu__box \" style={{paddingTop: 60+'px'}}>\r\n\r\n                        {props.isFetching === false ? props.genres.map((g,i)=>{\r\n\r\n                            return <li key={i} style={{marginTop: 10+'px'}}><p style={{marginTop: 60 + 'px'}} className=\"menu__item\">\r\n                                <input onClick={(e)=>{\r\n                                if(e.target.checked){\r\n                                    Object.assign(arrGenres, {[g.name]: e.target.value})\r\n                                    props.check(arrGenres)\r\n                                    props.FilterMovie(arrGenres)\r\n                                }else{\r\n                                    delete arrGenres[g.name]\r\n                                }\r\n\r\n                            }} type=\"checkbox\" name=\"\"\r\n                                                                                className=\"menu__item\" value={`&genres=${g.id}`}/>{g.name}</p></li>\r\n                        }) : console.log(\"bad\")}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </ul>\r\n\r\n                </div>*/\r\n    return (\r\n\r\n        <header className=\"header \" id=\"header\">\r\n\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n\r\n                    <div className={\"indexz\"}>\r\n                        <div className=\"hamburger-menu\">\r\n                            <input id=\"menu__toggle\" type=\"checkbox\"/>\r\n                            <label className=\"menu__btn\" htmlFor=\"menu__toggle\">\r\n                                <span> </span>\r\n                            </label>\r\n                            <ul className=\"menu__box\">\r\n\r\n                                {props.isFetching === false ? props.genres.map((g: any,i: number)=>{\r\n\r\n                                    return (<li key={i} style={{marginTop: 10+'px'}}><label htmlFor={g.id}><p style={{marginTop: 50 + 'px', fontSize: '25px'}} className=\"menu__item\">\r\n                                        <input onClick={(e:any)=>{\r\n\r\n                                            if(e.target.checked){\r\n\r\n                                                Object.assign(arrGenres, {[g.name]: e.target.value})\r\n                                                props.check(arrGenres)\r\n                                                props.FilterMovie(arrGenres)\r\n                                            }else{\r\n                                                delete arrGenres[g.name]\r\n                                            }\r\n/*можно чекбоксы прятать и при клике на нейм фильтрвать по нужной категории*/\r\n\r\n                                        }} type=\"radio\" name=\"flexRadioDefault\"\r\n                                               className=\"menu__item form-check-input\" id={g.id} style={{opacity: 0}} value={`&genres=${g.id}`}/>{g.name}</p></label></li>)\r\n                                }) : <p> </p>}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                   <SearchMovie text={props.text} searchMovie={props.searchMovie} SearchText={props.SearchText}/>\r\n                    <div className='col-lg-4' style={{zIndex: 9999999999999999}}>\r\n\r\n                        {props.profile ? !props.profile.request ? <><p>{props.profile.name}</p> <img width={'60px'} height={'60px'} src={props.profile.userPhotos}/><button onClick={()=>{localStorage.removeItem('token'); localStorage.removeItem(\"tokenRefresh\");localStorage.removeItem('userId'); localStorage.removeItem('name'); props.ProfileThunk()}}>logout</button></> : <><Link to={'/realLogin'}> <>login</> </Link><Link to={'/login'}> <>register</> </Link>\r\n                            {localStorage.removeItem('token')} {localStorage.removeItem('userId')} {localStorage.removeItem('name')}\r\n                            </>\r\n                        : <></>\r\n                        }\r\n\r\n\r\n                    </div>\r\n                    {isAuth ?\r\n                        <div style={{marginTop: '15px', position: 'relative'}}> <Link to='/followed'>followed movie</Link> </div>\r\n\r\n                        : <></>}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n})\r\n/*\r\n* name - arsenii\r\n* email - test@gmail.com\r\n* password - qwerty123098-\r\n* */\r\nexport default Header\r\n",["141","142"],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\HeaderContainer.tsx",[],"D:\\reactmovieapi\\my-app\\src\\App.tsx",["143"],"import './App.css';\nimport HomeContainer from './component/Home/HomeContainer'\nimport Footer from './component/Footer/Footer'\nimport HeaderContainer from \"./component/Header/HeaderContainer\";\nimport MovieDetailContainer from \"./component/movieDetail/MovieDetailContainer\";\nimport {Route, Switch} from 'react-router-dom'\nimport React, {Fragment} from 'react'\nimport LoginContainer from \"./component/Login/LoginContainer\";\nimport RealLoginContainer from \"./component/RealLogin/RealLoginContainer\";\nimport { Bin } from './bin/bin';\n\ntype propsType = {\n    isInitilized: boolean\n}\n\nlet App:any = React.memo((props: propsType) => {\n  return (\n    <div className=\"animate__animated animate__fadeIn\">\n\n            <Switch>\n                <Route exact path=\"/login\" component={LoginContainer}/>\n                <Route exact path=\"/followed\" component={Bin}/>\n                <Route exact path=\"/movie/:pk?\" component={MovieDetailContainer}/>\n                <Route exact path='/' render={() =>\n                    <Fragment>\n                       <Route path='' component={HeaderContainer}/>\n                       <Route path='' component={HomeContainer}/>\n\n\n\n                        <Footer/>\n                    </Fragment>\n                } />\n\n\n\n\n            </Switch>\n\n\n\n\n    </div>\n  );\n})\n\nexport default App;\n",["144","145"],"D:\\reactmovieapi\\my-app\\src\\redux\\redux.ts",[],["146","147"],"D:\\reactmovieapi\\my-app\\src\\component\\Footer\\Footer.tsx",["148","149","150","151"],"import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../style/style.css'\r\nimport { faInstagramSquare } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faVk } from \"@fortawesome/free-brands-svg-icons\";\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\n\r\n\r\nlet Footer = React.memo(() => {\r\n    return (\r\n        <footer className=\"col-12 d-flex mw-100 position-sticky\" style={{marginLeft: 0+'px', marginTop: 29+'%', height: 300+'px', marginRight: 0+'px',\r\n            background: \"#A99BFF\"}}>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"form col-12\">\r\n                        <form>\r\n                            <div className=\"form-row  \">\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"First name\"/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input style={{width: 100+\"%\"}} type=\"text\" className=\"form-control\" placeholder=\"Last name\"/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-sm col-md col-lg d-flex form__item\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Email\" required={true}/>\r\n                                </div>\r\n                                <div className=\"w-100\"> </div>\r\n                                <div className=\"col-lg-12\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary col-lg form__item\">send mail\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"icons col-lg\">\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faVk} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faInstagramSquare} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faTwitter} /></a>\r\n                    <a href=\"#\"><FontAwesomeIcon icon={faYoutube} /></a>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n                <br/>\r\n        </footer>\r\n    );\r\n})\r\n\r\nexport default Footer;\r\n","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetailContainer.tsx",["152","153"],"import React, {Fragment} from 'react'\r\nimport MovieDetail from \"./MovieDetail\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    deleteReviews,\r\n    getCurrentMovie,\r\n    getGenres,\r\n    getMovieBin,\r\n    getRating,\r\n    getReviews,\r\n    MovieId,\r\n    movieType,\r\n    Name,\r\n    Reviews,\r\n    ReviewsText,\r\n    setRating,\r\n    setReviews,\r\n    Text\r\n} from '../../redux/HomeReducer'\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from '../../redux/redux';\r\nimport HeaderContainer from \"../Header/HeaderContainer\";\r\n\r\ntype PathParamsType = {\r\n    pk: string\r\n}\r\ntype mapDispatchToProps = {\r\n    deleteReviews: (movie_id:string, rid:string)=>void\r\n    getMovieBin: any\r\n    getCurrentMovie: (pk: number) => Promise<void>\r\n    getGenres: ()=>void\r\n    getRating: (pk: number) => Promise<void>\r\n    getReviews: (pk:number)=>void\r\n    setReviews: (text:string, pk:number | string)=>void\r\n    setRating: (star: number, movie: number) => Promise<void>\r\n    Name: (name:string)=>void\r\n    Text: (text: string) => void\r\n    movie: Array<movieType>\r\n    ReviewsText: (text: string) => void\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\ntype PropsType = MapPropsType & mapDispatchToProps & RouteComponentProps<PathParamsType>;\r\nclass MovieDetailContainer extends React.PureComponent<PropsType> {\r\n    constructor(props:PropsType) {\r\n        super(props);\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.props.getMovieBin()\r\n        this.props.getCurrentMovie(Number(this.props.match.params.pk))\r\n        this.props.getRating(Number(this.props.match.params.pk))\r\n        this.props.getReviews(Number(this.props.match.params.pk))\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching == false ? <Fragment>\r\n                {/* @ts-ignore */}\r\n                    <HeaderContainer/>\r\n                {/* @ts-ignore */}\r\n                    <MovieDetail movie={this.props.movie}\r\n                                 isFetching={this.props.isFetching}\r\n                                 //@ts-ignore\r\n                                 currentMovie={this.props.currentMovie}\r\n\r\n                                 getRating={this.props.getRating}\r\n                                 rating={this.props.rating}\r\n                                 setReviews={this.props.setReviews}\r\n                                 reviews={this.props.reviews}\r\n                                 pk={this.props.match.params.pk}\r\n                                 Name={this.props.Name}\r\n                                 Text={this.props.Text}\r\n                                 setRating={this.props.setRating}\r\n                                 star={this.props.star}\r\n                                 movieId={this.props.movieId}\r\n                                 isAuthorized={this.props.isAuthorized}\r\n                                 userId={this.props.userId}\r\n                                 ReviewsText={this.props.ReviewsText}\r\n                                 textReviews={this.props.textReviews}\r\n                                 deleteReviews={this.props.deleteReviews}\r\n                    />\r\n\r\n                </Fragment>\r\n\r\n\r\n\r\n                :console.log('')}\r\n\r\n\r\n        </>\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        movie: state.homePage.movie,\r\n        //@ts-ignore\r\n        currentMovie: state.homePage.currentMovie,\r\n        isFetching: state.homePage.isFetching,\r\n        genres: state.homePage.genres,\r\n        rating: state.homePage.rating,\r\n        reviews: state.homePage.reviews,\r\n        nameReviews: state.homePage.name,\r\n        textReviews: state.homePage.textReviews,\r\n        star: state.homePage.star,\r\n        movieId: state.homePage.movieId,\r\n        isAuthorized: state.authPage.isAuthorized,\r\n        userId: state.authPage.userId\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter( connect(mapStateToProps,\r\n    {getCurrentMovie, MovieId, getGenres, getRating,\r\n        getReviews, Reviews, setReviews,Name, Text, ReviewsText, setRating, getMovieBin, deleteReviews})\r\n\r\n(MovieDetailContainer))","D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\FormReviews.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Carousel\\Carousel.tsx",["154","155"],"import React,{Component} from 'react'\r\n\r\nimport Carousel, {CarouselProps} from '@brainhubeu/react-carousel'\r\n\r\nimport '@brainhubeu/react-carousel/lib/style.css'\r\nimport {movieType} from \"../../redux/HomeReducer\";\r\n//import logo from '../Terminator_Genisys.png'\r\ntype PropsType = {\r\n    movie: Array<movieType>\r\n}\r\nexport class OwlDemo extends Component<PropsType, CarouselProps> {\r\n    constructor(props: PropsType & CarouselProps) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return(<><Carousel\r\n                // @ts-ignore\r\n                slidesPerPage={3}\r\n                animationSpeed={125}\r\n                offset={-40}\r\n            >\r\n                {Array.from(this.props.movie).map((m, i)=>{\r\n                   return <img key={i} style={{cursor: \"grab\", userSelect:\"none\", marginTop:65+'px'}}\r\n                               height={450+'px'} src={`http://localhost:8000${m.poster}`} />\r\n\r\n\r\n\r\n                })}</Carousel></>\r\n\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default OwlDemo","D:\\reactmovieapi\\my-app\\src\\index.js",[],"D:\\reactmovieapi\\my-app\\src\\redux\\HomeReducer.ts",["156"],"import {MovieApi, movieBinType} from \"../api/api\";\r\nimport {AppStateType} from \"./redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActorsDirectors, reviewsType} from \"../component/movieDetail/MovieDetail\";\r\n\r\nexport type currentMovieType = {\r\n    movie?: any;\r\n    user?: any;\r\n    budget?: number\r\n    category?: string\r\n    description?: string\r\n    fees_in_usa?: number\r\n    fess_in_world?: number\r\n    tagline?: string\r\n    title?: string\r\n    url?: string\r\n    world_premiere?: string\r\n    year?: number\r\n    country?: string\r\n    draft?: boolean\r\n    directors?: any\r\n    actors?: Array<ActorsDirectors>\r\n    id?: number\r\n    genres?: any\r\n    poster?: string\r\n    reviews?: Array<reviewsType>\r\n}\r\nexport type movieType = {\r\n    budget: number\r\n    results?: any\r\n    category: string\r\n    description: string\r\n    fees_in_usa: number\r\n    fess_in_world: number\r\n    tagline: string\r\n    title: string\r\n    url: string\r\n    count?: number\r\n    world_premiere: string\r\n    year: number\r\n    country: string\r\n    draft: boolean\r\n    directors: any\r\n    actors: any\r\n    id: number\r\n    poster: string\r\n    reviews: Array<reviewsType>\r\n}\r\n\r\ntype initialStateType = {\r\n    movieBin: Array<movieBinType>\r\n    text: string,\r\n    movie: Array<movieType>,\r\n    currentMovie: currentMovieType,\r\n    isFetching: boolean,\r\n    genres: Array<any>,\r\n    rating: Array<any>,\r\n    reviews: Array<reviewsType>,\r\n    genresCheck: any,\r\n    movieId: number,\r\n    nameReviews: string | null,\r\n    textReviews: string,\r\n    star: number | null,\r\n    numberState: number\r\n    count: null | number\r\n    results: null | Array<movieType>\r\n    name: null\r\n\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    movieBin: [],\r\n    text: '',\r\n    movie: [],\r\n    currentMovie: {},\r\n    isFetching: true,\r\n    genres: [],\r\n    rating: [],\r\n    reviews: [],\r\n    results: [],\r\n    genresCheck: [],\r\n    movieId: 0,\r\n    nameReviews: '',\r\n    textReviews: '',\r\n    star: 0,\r\n    numberState: 0,\r\n    count: null,\r\n    name: null\r\n};\r\n//type initialStateType = typeof initialState\r\nconst LOAD_MOVIE = \"LOAD_MOVIE\"\r\nconst LOAD_CURRENT_MOVIE = \"LOAD_CURRENT_MOVIE\"\r\nconst TOGGLE_FETCHING = \"TOGGLE_FETCHING\"\r\nconst GENRES = \"GENRES\"\r\nconst RATING = \"RATING\"\r\nconst TEXT = \"TEXT\"\r\nconst MOVIEBIN = \"MOVIEBIN\"\r\nconst CHECKBOX = \"CHECKBOX\"\r\nconst REVIEWS = \"REVIEWS\"\r\nexport const NAME = \"NAME\"\r\nconst TEXTREVIEWS = \"TEXTREVIEWS\"\r\nconst REVIEWSTEXT = \"REVIEWSTEXT\"\r\nconst SETSTAR = \"SETSTAR\"\r\nconst GETSTAR = \"GETSTAR\"\r\nconst SETMOVIEID = \"SETMOVIEID\"\r\nconst SETNUMBER = \"SETNUMBER\"\r\nconst SETCOUNT = \"SETCOUNT\"\r\nconst SETRESULTS = \"SETRESULTS\"\r\n/*сервак при пост зопросе возвращает все отзывы вклюсая толькочто добавленный*/\r\nconst HomeReducer = (state = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case LOAD_MOVIE: {\r\n            return {...state, movie: action.movie}\r\n        }\r\n        case MOVIEBIN: {\r\n            return {...state, movieBin: action.movieBin}\r\n        }\r\n        case SETRESULTS: {\r\n            return {...state, results: action.results}\r\n        }\r\n        case SETCOUNT: {\r\n            return {...state, count: action.count}\r\n        }\r\n        case SETSTAR: {\r\n            return {...state, star: action.star}\r\n        }\r\n        case REVIEWS: {\r\n            return {...state, reviews: action.reviews}\r\n        }\r\n        case TOGGLE_FETCHING: {\r\n            return {...state, isFetching: action.isFething}\r\n        }\r\n        case GENRES: {\r\n            return {...state, genres: action.genres}\r\n        }\r\n        case LOAD_CURRENT_MOVIE: {\r\n            return {...state, currentMovie: action.currentMovie}\r\n        }\r\n        case SETNUMBER: {\r\n            return {...state, numberState: action.number}\r\n        }\r\n        case RATING: {\r\n            return {...state, rating: action.rating}\r\n        }\r\n        case SETMOVIEID: {\r\n            return {...state, movieId: action.movieId}\r\n        }\r\n        case REVIEWSTEXT: {\r\n            return {...state, textReviews: action.text}\r\n        }\r\n        case TEXT: {\r\n            return {...state, text: action.text}\r\n        }\r\n        case NAME: {\r\n            return {...state, nameReviews: action.name}\r\n        }\r\n        case CHECKBOX: {\r\n            return {...state, genresCheck: action.check}\r\n        }\r\n        default:\r\n            return state\r\n\r\n\r\n    }\r\n}\r\ntype ActionType =\r\n    setMovieType\r\n    | setResultsType\r\n    | setCountType\r\n    | setGenresType\r\n    | toggleIsFetchingType\r\n    | setCurrentMovieType\r\n    | RatingCurrentMovieType\r\n    | SearchTextType\r\n    | CheckType\r\n    | ReviewsType\r\n    | SetNumberType\r\n    | MovieIdType\r\n    | StarType\r\n    | TextType\r\n    | RiviewsTextType\r\n    | NameType\r\n    | setMovieBinActionType\r\ntype setMovieBinActionType = {\r\n    type: typeof MOVIEBIN\r\n    movieBin: Array<movieBinType>\r\n}\r\ntype setMovieType = {\r\n    type: typeof LOAD_MOVIE\r\n    movie: any\r\n}\r\ntype setResultsType = {\r\n    type: typeof SETRESULTS\r\n    results: Array<movieType>\r\n}\r\ntype setCountType = {\r\n    type: typeof SETCOUNT\r\n    count: number | null\r\n}\r\ntype setGenresType = {\r\n    type: typeof GENRES\r\n    genres: any\r\n}\r\nexport type toggleIsFetchingType = {\r\n    type: typeof TOGGLE_FETCHING\r\n    isFething: boolean\r\n}\r\ntype setCurrentMovieType = {\r\n    type: typeof LOAD_CURRENT_MOVIE\r\n    currentMovie: any\r\n}\r\ntype RatingCurrentMovieType = {\r\n    type: typeof RATING\r\n    rating: any\r\n}\r\ntype SearchTextType = {\r\n    type: typeof TEXT\r\n    text: string\r\n}\r\ntype CheckType = {\r\n    type: typeof CHECKBOX\r\n    check: any\r\n}\r\ntype ReviewsType = {\r\n    type: typeof REVIEWS\r\n    reviews: any\r\n}\r\nexport type NameType = {\r\n    type: typeof NAME\r\n    name: string\r\n}\r\nexport type TextType = {\r\n    type: typeof TEXTREVIEWS\r\n    text: string\r\n}\r\ntype RiviewsTextType = {\r\n    type: typeof REVIEWSTEXT\r\n    text: string;\r\n}\r\ntype StarType = {\r\n    type: typeof SETSTAR\r\n    star: number\r\n}\r\ntype MovieIdType = {\r\n    type: typeof SETMOVIEID\r\n    movieId: number\r\n}\r\ntype SetNumberType = {\r\n    type: typeof SETNUMBER\r\n    number: number\r\n}\r\nexport const setMovie = (movie: any): setMovieType => ({type: LOAD_MOVIE, movie})\r\nexport const setGenres = (genres: any): setGenresType => ({type: GENRES, genres})\r\nexport const toggleIsFetching = (isFething: boolean): toggleIsFetchingType => ({type: TOGGLE_FETCHING, isFething})\r\nexport const setCurrentMovie = (currentMovie: any): setCurrentMovieType => ({type: LOAD_CURRENT_MOVIE, currentMovie})\r\nexport const RatingCurrentMovie = (rating: any): RatingCurrentMovieType => ({type: RATING, rating})\r\nexport const SearchText = (text: string): SearchTextType => ({type: TEXT, text})\r\nexport const Check = (check: any): CheckType => ({type: CHECKBOX, check})\r\nexport const Reviews = (reviews: any): ReviewsType => ({type: REVIEWS, reviews})\r\nexport const Name = (name: string): NameType => ({type: NAME, name})\r\nexport const Text = (text: string): TextType => ({type: TEXTREVIEWS, text})\r\nexport const ReviewsText = (text: string): RiviewsTextType => ({type: REVIEWSTEXT, text})\r\nexport const Star = (star: number): StarType => ({type: SETSTAR, star})\r\nexport const MovieId = (movieId: number): MovieIdType => ({type: SETMOVIEID, movieId})\r\nexport const SetNumber = (number: number): SetNumberType => ({type: SETNUMBER, number})\r\nexport const getCount = (count: number): setCountType => ({type: SETCOUNT, count})\r\nexport const getResults = (results: Array<movieType>): setResultsType => ({type: SETRESULTS, results})\r\nexport const setMovieBinAction = (movieBin: Array<movieBinType>): setMovieBinActionType => ({type: MOVIEBIN, movieBin})\r\n\r\nexport type GetStateType = () => AppStateType\r\n\r\nexport const getMovie = function () {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getMovie().then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const setReviews = function (text: string, movie: string | number) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.CreateReviews(text, movie).then((data: any) => {\r\n            dispatch(Reviews(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const setMovieBin = function (userid: string | null, movieid: number | undefined) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        // @ts-ignore\r\n        await MovieApi.setMovieBin(userid, movieid).then((data: Array<movieBinType>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const getMovieBin = function () {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getMovieBin().then((data: Array<movieBinType>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\nexport const deleteMovieBin = function (movie_id: string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.deleteMovieBin(movie_id).then((data: Array<any>) => {\r\n            dispatch(toggleIsFetching(true));\r\n            dispatch(setMovieBinAction(data));\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n    }\r\n}\r\n/*export const getMovie = async (dispatch) => {\r\n\r\n\r\n    await MovieApi.getMovie().then(data => {\r\n\r\n\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n        });\r\n    }*/\r\nexport const searchMovie = function (text: string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.searchMovie(text).then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(getCount(data.count))\r\n            dispatch(getResults(data.results))\r\n        })\r\n    }\r\n}\r\nexport const FilterMovie = function (number: any) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.GenreMovie(number).then((data: any) => {\r\n            dispatch(setMovie(data));\r\n            dispatch(getCount(data.count))\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(getResults(data.results))\r\n        })\r\n    }\r\n}\r\nexport const getGenres = () => {\r\n    return async (dispatch: Dispatch<ActionType>, getState: GetStateType) => {\r\n\r\n\r\n        await MovieApi.getGenres().then((data: any) => {\r\n\r\n\r\n            dispatch(setGenres(data));\r\n            dispatch(toggleIsFetching(false));\r\n        });\r\n    }\r\n}\r\n\r\nexport const getCurrentMovie = function (pk: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n\r\n        await MovieApi.getDetailMovie(pk).then((data: any) => {\r\n\r\n\r\n            dispatch(setCurrentMovie(data));\r\n            dispatch(MovieId(data.id));\r\n\r\n\r\n        });\r\n        await MovieApi.getRating(pk).then((data: any) => {\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(Star(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const getRating = function (pk: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getRating(pk).then((data: any) => {\r\n            dispatch(Star(data))\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const setRating = function (star: number, movie: number) {\r\n\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.setRating(star, movie).then((data: any) => {\r\n            dispatch(RatingCurrentMovie(data))\r\n            dispatch(Star(data))\r\n            dispatch(toggleIsFetching(false));\r\n        })\r\n\r\n    }\r\n}\r\nexport const getReviews = function (pk: number) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.getReviews(pk).then((data: any) => {\r\n            dispatch(Reviews(data))\r\n            dispatch(toggleIsFetching(false));\r\n\r\n        })\r\n\r\n    }\r\n}\r\nexport const deleteReviews = function (movie_id: string, rid:string) {\r\n    return async function (dispatch: Dispatch<ActionType>, getState: GetStateType) {\r\n        await MovieApi.deleteReviews(movie_id, rid).then((data: any) => {\r\n            dispatch(Reviews(data))\r\n            dispatch(toggleIsFetching(false));\r\n\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default HomeReducer",["157","158"],"D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\MovieDetail.tsx",["159","160","161","162","163","164","165","166","167","168"],"import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../style/style.css'\r\nimport '../../style/styleDetail.css'\r\nimport React from \"react\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport {FaStar} from \"react-icons/fa\";\r\nimport FormReviews from \"./FormReviews\";\r\nimport {currentMovieType, deleteMovieBin, movieType, setMovieBin} from \"../../redux/HomeReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nexport type reviewsType = {\r\n    name: string\r\n    text: string\r\n    movie: number\r\n    user: number\r\n    id: number | string\r\n}\r\n\r\nexport type ActorsDirectors = {\r\n    name: string\r\n    image: string\r\n    age: number\r\n    description: string\r\n}\r\n\r\ntype propsType = {\r\n    deleteReviews: (movie_id: string, rid: string)=>void\r\n    setMovieBin: (userid: number, movieid: number) => void\r\n    movie: Array<movieType>\r\n    isFetching: boolean\r\n    currentMovie: currentMovieType\r\n    getRating: (pk: number) => Promise<void>\r\n    rating: any\r\n    setReviews: (text: string, pk: number | string) => void\r\n    reviews: Array<any>\r\n    pk: number | string\r\n    Name: (name: string) => void\r\n    Text: (text: string) => void\r\n    setRating: (star: number, movie: number) => Promise<void>\r\n    star: null | number\r\n    movieId: number\r\n    isAuthorized: boolean | null\r\n    userId: number | null\r\n    ReviewsText: (text: string) => void\r\n    textReviews: string\r\n}\r\n\r\n\r\nlet userRiviewsId: any = []\r\n//@ts-ignore\r\nwindow.userRiviewsId = userRiviewsId\r\n\r\nlet MovieDetail = React.memo((props: propsType): JSX.Element => {\r\n    let movieId:any = useSelector((state:AppStateType)=>{return state.homePage.movieId})\r\n\r\n\r\n    var follow = Number(props.currentMovie.id) == Number(localStorage.getItem('mid')) ? true : false\r\n    let dispatch = useDispatch()\r\n    let history = useHistory()\r\n    const users: any = useSelector((state: AppStateType) => {\r\n        return state.homePage.movieBin\r\n    })\r\n\r\n    const isAuthorized = useSelector((state: AppStateType) => {\r\n        return state.authPage.isAuthorized\r\n    })\r\n    let arr = [1, 2, 3, 4, 5]\r\n    let star = props.star\r\n    console.log(star)\r\n    return (<>\r\n\r\n\r\n            {props.isFetching ? <></> : <>\r\n                <div style={{marginTop: 70 + 'px'}}></div>\r\n                <img style={{paddingLeft: 30 + 'px', paddingTop: 20 + 'px'}} width={430 + 'px'} height={500 + 'px'}\r\n                    //@ts-ignore\r\n                     src={`http://localhost:8000${props.currentMovie.poster}`}/>\r\n                <div className={\"cont\"}>\r\n                    <strong>title: </strong><p>{props.currentMovie.title}</p><br/>\r\n                    <strong>description: </strong><p>{props.currentMovie.description}</p><br/>\r\n                    <strong>rating: </strong><p>{arr.map((s, i) => {\r\n                    let ratingValue = i + 1\r\n                    return <>\r\n                        <label>\r\n                            <input type=\"radio\" name=\"rating\" onClick={() => {\r\n\r\n                                console.log(Number(ratingValue))\r\n                                props.setRating(Number(ratingValue), props.movieId)\r\n\r\n                            }}/>\r\n                            <FaStar\r\n                                className={\"star\"}\r\n                                color={(ratingValue < Number(star) + 1) ? \"#eac424\" : \"grey\"}\r\n                                size={20}\r\n                            />\r\n                        </label>\r\n                    </>\r\n                })}</p>\r\n                    <strong>year: </strong><p>{props.currentMovie.year}</p>\r\n                    <strong>бюджет: </strong><p>{props.currentMovie.budget}$</p>\r\n\r\n                    {Array.from(users).map((u: any, i) => {\r\n                        {\r\n                            props.currentMovie.id == Number(localStorage.getItem(\"mid\")) && props.currentMovie.user == Number(localStorage.getItem(\"userId\")) ? follow = true : follow = false\r\n                        }\r\n                        console.log(u)\r\n                        return <></>\r\n                    })}\r\n                    {isAuthorized ?\r\n                        <>\r\n                            <button type={'button'} className={classNames('btn ', { 'btn-success': follow==false,'btn-danger': follow  })} onClick={async () => {\r\n                                if(!follow){await dispatch(setMovieBin(localStorage.getItem(\"userId\"), props.currentMovie.id)); history.push('/followed')}\r\n                                else{await dispatch(deleteMovieBin(String(props.currentMovie.id))); follow=false; history.push('/followed')}\r\n\r\n                            }}>{<p  onClick={(e) => {}}>{follow ? 'delete' : 'add'}</p>}\r\n\r\n                            </button>\r\n                        </> : <></>}\r\n                </div>\r\n                <h1>Reviews</h1>\r\n                <FormReviews isFetching={props.isFetching}\r\n                             setReviews={props.setReviews} pk={props.pk} textReviews={props.textReviews}\r\n                             ReviewsText={props.ReviewsText}/>\r\n\r\n                {props.isFetching == false ? Array.from(props.reviews).map((r, i) => {\r\n\r\n\r\n                    return <div key={i}>\r\n\r\n                        <>\r\n                            <div className=\"actionBox\">\r\n                                <ul className=\"commentList\">\r\n                                    <li>\r\n                                        <div className=\"commenterImage\">\r\n                                            <img className={\"avtar\"} width={50 + 'px'} height={50 + 'px'}\r\n                                                 src=\"https://www.elmechtechnology.com/sites/all/themes/aganhost/demos/no-avatar.jpg\"/>\r\n                                        </div>\r\n                                        <div className=\"commentText\">\r\n                                            <strong className={'dataId'}\r\n                                                    data-id={r.user}>{r.name}</strong> <p\r\n                                            className=\"\" style={{wordBreak: \"break-all\"}}>{r.text}</p>\r\n\r\n\r\n                                            {r.user == Number(localStorage.getItem(\"userId\")) ? <>\r\n                                                <button onClick={() => {\r\n                                                    props.deleteReviews(movieId,r.id)\r\n                                                }}>delete\r\n                                                </button>\r\n                                            </> : <></>}\r\n\r\n\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n\r\n                            </div>\r\n                        </>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                }) : <div>loading...</div>}\r\n\r\n                <Footer/>\r\n\r\n            </>}\r\n\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default MovieDetail","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLoginContainer.tsx",["169","170","171"],"import RealLogin from './RealLogin'\r\nimport React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {LoginAction, LoginThunk, LoginRealThunk} from \"../../redux/AuthReducer\";\r\nimport {AppStateType} from \"../../redux/redux\";\r\n\r\ntype mapDispatchToProps = {\r\n    LoginRealThunk: (email:string, password:string, name:string)=>void\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n\r\ntype PropsType = MapPropsType & mapDispatchToProps\r\n\r\nclass RealLoginContainer extends React.PureComponent<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <RealLogin\r\n                LoginRealThunk={this.props.LoginRealThunk}\r\n                profile={this.props.profile}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return{\r\n        username: state.authPage.username,\r\n        email: state.authPage.email,\r\n        password: state.authPage.password,\r\n        profile: state.authPage.profile\r\n    }\r\n}\r\nexport default connect<MapPropsType,mapDispatchToProps,PropsType, AppStateType>(mapStateToProps,{LoginRealThunk})(RealLoginContainer)","D:\\reactmovieapi\\my-app\\src\\component\\RealLogin\\RealLogin.tsx",["172"],"import React from 'react'\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {erorAction} from \"../../redux/AppReducer\";\r\nimport {Link} from 'react-router-dom'\r\n\r\ntype propsType = {\r\n    LoginRealThunk: (email:string, password:string, name:string)=>void\r\n    profile: any\r\n}\r\n\r\nconst RealLogin = React.memo((props: propsType)=>{\r\n    let history = useHistory();\r\n    let dispatch = useDispatch()\r\n    async function handleClick() {\r\n        //history.push(\"\");\r\n        await dispatch(erorAction(false))\r\n        //document.location.reload();\r\n        return (<Redirect to={'/'}/>)\r\n    }\r\n    /* можно получать профиль юзера делая запро сна users/me а не в бд\r\n    * нужно получать токен и деалть запрос на users/me\r\n    *\r\n    * */\r\n    return (<>\r\n        <div>\r\n            <input type={'email'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.email = e.target.value\r\n            }} placeholder={'email'}/> <br/>\r\n            <input type={'password'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.password = e.target.value\r\n            }} placeholder={'password'}/>\r\n            <input type={'text'} onChange={(e)=>{\r\n                console.log(e.target.value)\r\n                window.name = e.target.value\r\n            }} placeholder={'name'}/>\r\n\r\n            <button type={\"submit\"} onClick={async ()=>{await props.LoginRealThunk(window.email, window.password, window.name);\r\n\r\n                await handleClick()\r\n\r\n            }}><Link to={'/'}>login</Link></button>\r\n\r\n        </div>\r\n    </>)\r\n})\r\n\r\nexport default RealLogin","D:\\reactmovieapi\\my-app\\src\\particlesComponent\\Partikles.js",[],"D:\\reactmovieapi\\my-app\\src\\component\\Home\\HomeContainer.tsx",["173","174","175"],"import React from 'react'\r\nimport Home from \"./Home\";\r\nimport {connect} from 'react-redux';\r\nimport {getMovie, toggleIsFetching, movieType, currentMovieType} from '../../redux/HomeReducer'\r\nimport {AppStateType} from \"../../redux/redux\";\r\nimport {ISUserThunk} from \"../../redux/AuthReducer\";\r\n\r\n\r\ntype mapDispatchToProps = {\r\n    getMovie: ()=>void,\r\n    ISUserThunk: ()=>void\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\n/*type PropsType = {\r\n    getMovie: ()=>void\r\n    isFetching: boolean\r\n    movie: Array<movieType>\r\n    currentMovie: any | null\r\n    text: string\r\n    results: Array<movieType>\r\n    count:number | null\r\n}*/\r\n/*сделать так чтобы все данные были в стейте this.props.movie.count = this.props.count\r\n* type PropsType = MapPropsType & mapDispatchToProps\r\n* и по сути ероров не будет*/\r\n\r\n//type PropsType = MapPropsType & mapDispatchToProps\r\ntype PropsType = MapPropsType & mapDispatchToProps\r\n\r\n\r\nclass HomeContainer extends React.PureComponent<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getMovie()\r\n        if(localStorage.getItem('token')){\r\n            this.props.ISUserThunk()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            { this.props.isFetching ? console.log('') : <Home movie={this.props.movie}\r\n                                                                isFetching={this.props.isFetching}\r\n\r\n                                                                currentMovie={this.props.currentMovie}\r\n                                                                text={this.props.text}\r\n\r\n                                                                movieResults={this.props.results}\r\n                                                                movieCount={this.props.count}\r\n\r\n\r\n            /> }\r\n\r\n        </>\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        movie: state.homePage.movie,\r\n        currentMovie: state.homePage.currentMovie,\r\n        isFetching: state.homePage.isFetching,\r\n        text: state.homePage.text,\r\n        results: state.homePage.results,\r\n        count: state.homePage.count,\r\n    }\r\n}\r\n/*let mapDispatchToPops = (dispatch) => {\r\n    return{\r\n        getMovie:()=>{dispatch(getMovie)}\r\n    }\r\n}*/\r\n\r\n\r\nexport default connect<MapPropsType,mapDispatchToProps,PropsType, AppStateType>(mapStateToProps,\r\n    {getMovie, ISUserThunk})(HomeContainer);","D:\\reactmovieapi\\my-app\\src\\component\\Home\\Home.tsx",["176","177","178","179","180","181","182"],"D:\\reactmovieapi\\my-app\\src\\reportWebVitals.js",[],["183","184"],"D:\\reactmovieapi\\my-app\\src\\component\\movieDetail\\Actors.tsx",["185","186"],"D:\\reactmovieapi\\my-app\\src\\redux\\AppReducer.ts",["187"],"import {getGenres, getMovie, GetStateType, toggleIsFetchingType} from \"./HomeReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ISUserThunk, ProfileThunk} from \"./AuthReducer\";\r\n\r\ntype initialStateType = {\r\n    isInitilized: boolean\r\n    eror: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    isInitilized: false,\r\n    eror: false\r\n}\r\n\r\n\r\nexport const INITIALZED = \"INITIALZED\"\r\nexport const EROR = \"EROR\"\r\n\r\ntype ActionInitType = {\r\n    type: typeof INITIALZED\r\n    //isInitial: boolean\r\n}\r\ntype ActionErorType = {\r\n    type: typeof EROR\r\n    eror: boolean\r\n}\r\n\r\ntype getMovieType = typeof getMovie\r\n\r\ntype ActionType = ActionInitType | toggleIsFetchingType | ActionErorType\r\n\r\n\r\n\r\nconst AppReducer = (state = initialState, action: ActionType):initialStateType => {/*InitialStateType*/\r\n    switch(action.type) {\r\n        case INITIALZED: {\r\n            return {...state, isInitilized: true}\r\n        }\r\n        case EROR: {\r\n            return {...state, eror: true}\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n\r\n    }}\r\n\r\nlet initAction = ()=>({type: INITIALZED})\r\nexport let erorAction = (eror: boolean): ActionErorType=>({type: EROR, eror})\r\nexport const initThunk = function (){\r\n    return async function (dispatch:Dispatch<any>, getState:GetStateType){\r\n        var promise = dispatch(getMovie)\r\n        var promise2 = dispatch(getGenres)\r\n        var promise1 = dispatch(ProfileThunk)\r\n        var promise4 = dispatch(ISUserThunk)\r\n        Promise.all([promise, promise1, promise2, promise4]).then(()=>{\r\n            setTimeout(()=>{ dispatch(initAction())},600)\r\n\r\n        })\r\n        Promise.reject([promise1]).then(function(success) {\r\n            // не вызывается\r\n        }, function(error) {\r\n           dispatch(erorAction(true))\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppReducer\r\n","D:\\reactmovieapi\\my-app\\src\\component\\loader\\loader.tsx",[],["188","189"],"D:\\reactmovieapi\\my-app\\src\\AppContainer.tsx",[],"D:\\reactmovieapi\\my-app\\src\\component\\Header\\SearchMovie.tsx",[],"D:\\reactmovieapi\\my-app\\src\\bin\\bin.tsx",["190","191"],"import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMovieBin} from '../redux/HomeReducer';\r\nimport {AppStateType} from \"../redux/redux\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Bin = (props: any) => {\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getMovieBin())\r\n    }, [])\r\n    let movies = useSelector((state: AppStateType) => state.homePage.movieBin)\r\n    console.log(movies)\r\n    return (<>\r\n        {movies.map((m: any, i) => {\r\n            return <div>\r\n                <Link to={`movie/${m.movieid}`}>\r\n                    <img src={`http://localhost:8000${m.moviePoster}`}/>\r\n                </Link>\r\n            </div>\r\n        })}\r\n    </>)\r\n}\r\n\r\n",{"ruleId":"192","severity":1,"message":"193","line":158,"column":42,"nodeType":"194","messageId":"195","endLine":158,"endColumn":59},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":124,"column":17,"nodeType":"202","messageId":"203","endLine":124,"endColumn":20},{"ruleId":"192","severity":1,"message":"193","line":177,"column":33,"nodeType":"194","messageId":"195","endLine":177,"endColumn":45},{"ruleId":"204","severity":1,"message":"205","line":15,"column":5,"nodeType":"206","messageId":"207","endLine":17,"endColumn":6},{"ruleId":"196","replacedBy":"208"},{"ruleId":"198","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":119,"column":97,"nodeType":"212","endLine":119,"endColumn":165},{"ruleId":"196","replacedBy":"213"},{"ruleId":"198","replacedBy":"214"},{"ruleId":"200","severity":1,"message":"215","line":9,"column":8,"nodeType":"202","messageId":"203","endLine":9,"endColumn":26},{"ruleId":"196","replacedBy":"216"},{"ruleId":"198","replacedBy":"217"},{"ruleId":"196","replacedBy":"218"},{"ruleId":"198","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":43,"column":21,"nodeType":"212","endLine":43,"endColumn":33},{"ruleId":"220","severity":1,"message":"221","line":44,"column":21,"nodeType":"212","endLine":44,"endColumn":33},{"ruleId":"220","severity":1,"message":"221","line":45,"column":21,"nodeType":"212","endLine":45,"endColumn":33},{"ruleId":"220","severity":1,"message":"221","line":46,"column":21,"nodeType":"212","endLine":46,"endColumn":33},{"ruleId":"204","severity":1,"message":"205","line":47,"column":5,"nodeType":"206","messageId":"207","endLine":50,"endColumn":6},{"ruleId":"222","severity":1,"message":"223","line":61,"column":36,"nodeType":"224","messageId":"225","endLine":61,"endColumn":38},{"ruleId":"204","severity":1,"message":"205","line":12,"column":5,"nodeType":"206","messageId":"207","endLine":15,"endColumn":6},{"ruleId":"210","severity":1,"message":"211","line":29,"column":27,"nodeType":"212","endLine":30,"endColumn":93},{"ruleId":"200","severity":1,"message":"226","line":104,"column":7,"nodeType":"202","messageId":"203","endLine":104,"endColumn":14},{"ruleId":"196","replacedBy":"227"},{"ruleId":"198","replacedBy":"228"},{"ruleId":"200","severity":1,"message":"229","line":11,"column":9,"nodeType":"202","messageId":"203","endLine":11,"endColumn":13},{"ruleId":"222","severity":1,"message":"223","line":60,"column":48,"nodeType":"224","messageId":"225","endLine":60,"endColumn":50},{"ruleId":"210","severity":1,"message":"211","line":78,"column":17,"nodeType":"212","endLine":80,"endColumn":81},{"ruleId":"230","severity":1,"message":"231","line":106,"column":25,"nodeType":"232","messageId":"233","endLine":108,"endColumn":26},{"ruleId":"222","severity":1,"message":"223","line":107,"column":51,"nodeType":"224","messageId":"225","endLine":107,"endColumn":53},{"ruleId":"222","severity":1,"message":"223","line":107,"column":117,"nodeType":"224","messageId":"225","endLine":107,"endColumn":119},{"ruleId":"222","severity":1,"message":"223","line":114,"column":106,"nodeType":"224","messageId":"225","endLine":114,"endColumn":108},{"ruleId":"222","severity":1,"message":"223","line":128,"column":35,"nodeType":"224","messageId":"225","endLine":128,"endColumn":37},{"ruleId":"210","severity":1,"message":"211","line":138,"column":45,"nodeType":"212","endLine":139,"endColumn":136},{"ruleId":"222","severity":1,"message":"223","line":147,"column":53,"nodeType":"224","messageId":"225","endLine":147,"endColumn":55},{"ruleId":"200","severity":1,"message":"234","line":4,"column":9,"nodeType":"202","messageId":"203","endLine":4,"endColumn":20},{"ruleId":"200","severity":1,"message":"235","line":4,"column":22,"nodeType":"202","messageId":"203","endLine":4,"endColumn":32},{"ruleId":"204","severity":1,"message":"205","line":16,"column":5,"nodeType":"206","messageId":"207","endLine":18,"endColumn":6},{"ruleId":"200","severity":1,"message":"236","line":13,"column":9,"nodeType":"202","messageId":"203","endLine":13,"endColumn":16},{"ruleId":"200","severity":1,"message":"237","line":4,"column":19,"nodeType":"202","messageId":"203","endLine":4,"endColumn":35},{"ruleId":"200","severity":1,"message":"238","line":4,"column":37,"nodeType":"202","messageId":"203","endLine":4,"endColumn":46},{"ruleId":"200","severity":1,"message":"239","line":4,"column":48,"nodeType":"202","messageId":"203","endLine":4,"endColumn":64},{"ruleId":"200","severity":1,"message":"240","line":5,"column":14,"nodeType":"202","messageId":"203","endLine":5,"endColumn":21},{"ruleId":"200","severity":1,"message":"241","line":5,"column":23,"nodeType":"202","messageId":"203","endLine":5,"endColumn":28},{"ruleId":"200","severity":1,"message":"242","line":5,"column":30,"nodeType":"202","messageId":"203","endLine":5,"endColumn":36},{"ruleId":"200","severity":1,"message":"243","line":8,"column":9,"nodeType":"202","messageId":"203","endLine":8,"endColumn":18},{"ruleId":"200","severity":1,"message":"244","line":9,"column":8,"nodeType":"202","messageId":"203","endLine":9,"endColumn":18},{"ruleId":"200","severity":1,"message":"239","line":10,"column":9,"nodeType":"202","messageId":"203","endLine":10,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":112,"column":33,"nodeType":"224","messageId":"225","endLine":112,"endColumn":35},{"ruleId":"196","replacedBy":"227"},{"ruleId":"198","replacedBy":"228"},{"ruleId":"222","severity":1,"message":"223","line":15,"column":31,"nodeType":"224","messageId":"225","endLine":15,"endColumn":33},{"ruleId":"210","severity":1,"message":"211","line":17,"column":21,"nodeType":"212","endLine":19,"endColumn":35},{"ruleId":"200","severity":1,"message":"245","line":28,"column":6,"nodeType":"202","messageId":"203","endLine":28,"endColumn":18},{"ruleId":"196","replacedBy":"246"},{"ruleId":"198","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":11,"column":8,"nodeType":"250","endLine":11,"endColumn":10,"suggestions":"251"},{"ruleId":"210","severity":1,"message":"211","line":18,"column":21,"nodeType":"212","endLine":18,"endColumn":73},"@typescript-eslint/consistent-type-assertions","Use 'as string' instead of '<string>'.","TSTypeAssertion","as","no-native-reassign",["252"],"no-negated-in-lhs",["253"],"@typescript-eslint/no-unused-vars","'str' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["252"],["253"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["252"],["253"],"'RealLoginContainer' is defined but never used.",["252"],["253"],["252"],["253"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GETSTAR' is assigned a value but never used.",["252"],["253"],"'Link' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'LoginAction' is defined but never used.","'LoginThunk' is defined but never used.","'history' is assigned a value but never used.","'toggleIsFetching' is defined but never used.","'movieType' is defined but never used.","'currentMovieType' is defined but never used.","'NavLink' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'faYoutube' is defined but never used.","'Particless' is defined but never used.","'getMovieType' is defined but never used.",["252"],["253"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["254"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},"Update the dependencies array to be: [dispatch]",{"range":"257","text":"258"},[369,371],"[dispatch]"]